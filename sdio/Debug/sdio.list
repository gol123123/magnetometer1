
sdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006154  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006400  08006400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006408  08006408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c0  2000000c  0800641c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  200041cc  0800641c  000241cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f497  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002318  00000000  00000000  0002f4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  000317f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  00032280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c1  00000000  00000000  00032c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd30  00000000  00000000  00049ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895eb  00000000  00000000  00057bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e11e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  000e1238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080062d4 	.word	0x080062d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080062d4 	.word	0x080062d4

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b96e 	b.w	8000ad8 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	4604      	mov	r4, r0
 800081c:	468c      	mov	ip, r1
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8083 	bne.w	800092a <__udivmoddi4+0x116>
 8000824:	428a      	cmp	r2, r1
 8000826:	4617      	mov	r7, r2
 8000828:	d947      	bls.n	80008ba <__udivmoddi4+0xa6>
 800082a:	fab2 f282 	clz	r2, r2
 800082e:	b142      	cbz	r2, 8000842 <__udivmoddi4+0x2e>
 8000830:	f1c2 0020 	rsb	r0, r2, #32
 8000834:	fa24 f000 	lsr.w	r0, r4, r0
 8000838:	4091      	lsls	r1, r2
 800083a:	4097      	lsls	r7, r2
 800083c:	ea40 0c01 	orr.w	ip, r0, r1
 8000840:	4094      	lsls	r4, r2
 8000842:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000846:	0c23      	lsrs	r3, r4, #16
 8000848:	fbbc f6f8 	udiv	r6, ip, r8
 800084c:	fa1f fe87 	uxth.w	lr, r7
 8000850:	fb08 c116 	mls	r1, r8, r6, ip
 8000854:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000858:	fb06 f10e 	mul.w	r1, r6, lr
 800085c:	4299      	cmp	r1, r3
 800085e:	d909      	bls.n	8000874 <__udivmoddi4+0x60>
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	f106 30ff 	add.w	r0, r6, #4294967295
 8000866:	f080 8119 	bcs.w	8000a9c <__udivmoddi4+0x288>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 8116 	bls.w	8000a9c <__udivmoddi4+0x288>
 8000870:	3e02      	subs	r6, #2
 8000872:	443b      	add	r3, r7
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f0f8 	udiv	r0, r3, r8
 800087c:	fb08 3310 	mls	r3, r8, r0, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb00 fe0e 	mul.w	lr, r0, lr
 8000888:	45a6      	cmp	lr, r4
 800088a:	d909      	bls.n	80008a0 <__udivmoddi4+0x8c>
 800088c:	193c      	adds	r4, r7, r4
 800088e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000892:	f080 8105 	bcs.w	8000aa0 <__udivmoddi4+0x28c>
 8000896:	45a6      	cmp	lr, r4
 8000898:	f240 8102 	bls.w	8000aa0 <__udivmoddi4+0x28c>
 800089c:	3802      	subs	r0, #2
 800089e:	443c      	add	r4, r7
 80008a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a4:	eba4 040e 	sub.w	r4, r4, lr
 80008a8:	2600      	movs	r6, #0
 80008aa:	b11d      	cbz	r5, 80008b4 <__udivmoddi4+0xa0>
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	2300      	movs	r3, #0
 80008b0:	e9c5 4300 	strd	r4, r3, [r5]
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xaa>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d150      	bne.n	8000968 <__udivmoddi4+0x154>
 80008c6:	1bcb      	subs	r3, r1, r7
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	fa1f f887 	uxth.w	r8, r7
 80008d0:	2601      	movs	r6, #1
 80008d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008d6:	0c21      	lsrs	r1, r4, #16
 80008d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e0:	fb08 f30c 	mul.w	r3, r8, ip
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d907      	bls.n	80008f8 <__udivmoddi4+0xe4>
 80008e8:	1879      	adds	r1, r7, r1
 80008ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008ee:	d202      	bcs.n	80008f6 <__udivmoddi4+0xe2>
 80008f0:	428b      	cmp	r3, r1
 80008f2:	f200 80e9 	bhi.w	8000ac8 <__udivmoddi4+0x2b4>
 80008f6:	4684      	mov	ip, r0
 80008f8:	1ac9      	subs	r1, r1, r3
 80008fa:	b2a3      	uxth	r3, r4
 80008fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000900:	fb0e 1110 	mls	r1, lr, r0, r1
 8000904:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000908:	fb08 f800 	mul.w	r8, r8, r0
 800090c:	45a0      	cmp	r8, r4
 800090e:	d907      	bls.n	8000920 <__udivmoddi4+0x10c>
 8000910:	193c      	adds	r4, r7, r4
 8000912:	f100 33ff 	add.w	r3, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x10a>
 8000918:	45a0      	cmp	r8, r4
 800091a:	f200 80d9 	bhi.w	8000ad0 <__udivmoddi4+0x2bc>
 800091e:	4618      	mov	r0, r3
 8000920:	eba4 0408 	sub.w	r4, r4, r8
 8000924:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000928:	e7bf      	b.n	80008aa <__udivmoddi4+0x96>
 800092a:	428b      	cmp	r3, r1
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x12e>
 800092e:	2d00      	cmp	r5, #0
 8000930:	f000 80b1 	beq.w	8000a96 <__udivmoddi4+0x282>
 8000934:	2600      	movs	r6, #0
 8000936:	e9c5 0100 	strd	r0, r1, [r5]
 800093a:	4630      	mov	r0, r6
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	fab3 f683 	clz	r6, r3
 8000946:	2e00      	cmp	r6, #0
 8000948:	d14a      	bne.n	80009e0 <__udivmoddi4+0x1cc>
 800094a:	428b      	cmp	r3, r1
 800094c:	d302      	bcc.n	8000954 <__udivmoddi4+0x140>
 800094e:	4282      	cmp	r2, r0
 8000950:	f200 80b8 	bhi.w	8000ac4 <__udivmoddi4+0x2b0>
 8000954:	1a84      	subs	r4, r0, r2
 8000956:	eb61 0103 	sbc.w	r1, r1, r3
 800095a:	2001      	movs	r0, #1
 800095c:	468c      	mov	ip, r1
 800095e:	2d00      	cmp	r5, #0
 8000960:	d0a8      	beq.n	80008b4 <__udivmoddi4+0xa0>
 8000962:	e9c5 4c00 	strd	r4, ip, [r5]
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000968:	f1c2 0320 	rsb	r3, r2, #32
 800096c:	fa20 f603 	lsr.w	r6, r0, r3
 8000970:	4097      	lsls	r7, r2
 8000972:	fa01 f002 	lsl.w	r0, r1, r2
 8000976:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800097a:	40d9      	lsrs	r1, r3
 800097c:	4330      	orrs	r0, r6
 800097e:	0c03      	lsrs	r3, r0, #16
 8000980:	fbb1 f6fe 	udiv	r6, r1, lr
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	fb0e 1116 	mls	r1, lr, r6, r1
 800098c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000990:	fb06 f108 	mul.w	r1, r6, r8
 8000994:	4299      	cmp	r1, r3
 8000996:	fa04 f402 	lsl.w	r4, r4, r2
 800099a:	d909      	bls.n	80009b0 <__udivmoddi4+0x19c>
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	f106 3cff 	add.w	ip, r6, #4294967295
 80009a2:	f080 808d 	bcs.w	8000ac0 <__udivmoddi4+0x2ac>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 808a 	bls.w	8000ac0 <__udivmoddi4+0x2ac>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	443b      	add	r3, r7
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	b281      	uxth	r1, r0
 80009b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c0:	fb00 f308 	mul.w	r3, r0, r8
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x1c4>
 80009c8:	1879      	adds	r1, r7, r1
 80009ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80009ce:	d273      	bcs.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d0:	428b      	cmp	r3, r1
 80009d2:	d971      	bls.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d4:	3802      	subs	r0, #2
 80009d6:	4439      	add	r1, r7
 80009d8:	1acb      	subs	r3, r1, r3
 80009da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009de:	e778      	b.n	80008d2 <__udivmoddi4+0xbe>
 80009e0:	f1c6 0c20 	rsb	ip, r6, #32
 80009e4:	fa03 f406 	lsl.w	r4, r3, r6
 80009e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009ec:	431c      	orrs	r4, r3
 80009ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80009f2:	fa01 f306 	lsl.w	r3, r1, r6
 80009f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80009fe:	431f      	orrs	r7, r3
 8000a00:	0c3b      	lsrs	r3, r7, #16
 8000a02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a06:	fa1f f884 	uxth.w	r8, r4
 8000a0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a12:	fb09 fa08 	mul.w	sl, r9, r8
 8000a16:	458a      	cmp	sl, r1
 8000a18:	fa02 f206 	lsl.w	r2, r2, r6
 8000a1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x220>
 8000a22:	1861      	adds	r1, r4, r1
 8000a24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a28:	d248      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a2a:	458a      	cmp	sl, r1
 8000a2c:	d946      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a32:	4421      	add	r1, r4
 8000a34:	eba1 010a 	sub.w	r1, r1, sl
 8000a38:	b2bf      	uxth	r7, r7
 8000a3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a46:	fb00 f808 	mul.w	r8, r0, r8
 8000a4a:	45b8      	cmp	r8, r7
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x24a>
 8000a4e:	19e7      	adds	r7, r4, r7
 8000a50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a54:	d22e      	bcs.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a56:	45b8      	cmp	r8, r7
 8000a58:	d92c      	bls.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	4427      	add	r7, r4
 8000a5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a62:	eba7 0708 	sub.w	r7, r7, r8
 8000a66:	fba0 8902 	umull	r8, r9, r0, r2
 8000a6a:	454f      	cmp	r7, r9
 8000a6c:	46c6      	mov	lr, r8
 8000a6e:	4649      	mov	r1, r9
 8000a70:	d31a      	bcc.n	8000aa8 <__udivmoddi4+0x294>
 8000a72:	d017      	beq.n	8000aa4 <__udivmoddi4+0x290>
 8000a74:	b15d      	cbz	r5, 8000a8e <__udivmoddi4+0x27a>
 8000a76:	ebb3 020e 	subs.w	r2, r3, lr
 8000a7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a82:	40f2      	lsrs	r2, r6
 8000a84:	ea4c 0202 	orr.w	r2, ip, r2
 8000a88:	40f7      	lsrs	r7, r6
 8000a8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e70b      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e9      	b.n	8000874 <__udivmoddi4+0x60>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6fd      	b.n	80008a0 <__udivmoddi4+0x8c>
 8000aa4:	4543      	cmp	r3, r8
 8000aa6:	d2e5      	bcs.n	8000a74 <__udivmoddi4+0x260>
 8000aa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aac:	eb69 0104 	sbc.w	r1, r9, r4
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7df      	b.n	8000a74 <__udivmoddi4+0x260>
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e7d2      	b.n	8000a5e <__udivmoddi4+0x24a>
 8000ab8:	4660      	mov	r0, ip
 8000aba:	e78d      	b.n	80009d8 <__udivmoddi4+0x1c4>
 8000abc:	4681      	mov	r9, r0
 8000abe:	e7b9      	b.n	8000a34 <__udivmoddi4+0x220>
 8000ac0:	4666      	mov	r6, ip
 8000ac2:	e775      	b.n	80009b0 <__udivmoddi4+0x19c>
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	e74a      	b.n	800095e <__udivmoddi4+0x14a>
 8000ac8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000acc:	4439      	add	r1, r7
 8000ace:	e713      	b.n	80008f8 <__udivmoddi4+0xe4>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	443c      	add	r4, r7
 8000ad4:	e724      	b.n	8000920 <__udivmoddi4+0x10c>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_idiv0>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f000 faac 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 f886 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 f90c 	bl	8000d04 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000aec:	f000 f8ea 	bl	8000cc4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000af0:	f003 f8e8 	bl	8003cc4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) == FR_OK)
 8000af4:	2201      	movs	r2, #1
 8000af6:	4932      	ldr	r1, [pc, #200]	; (8000bc0 <main+0xe4>)
 8000af8:	4832      	ldr	r0, [pc, #200]	; (8000bc4 <main+0xe8>)
 8000afa:	f004 ffbd 	bl	8005a78 <f_mount>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d125      	bne.n	8000b50 <main+0x74>
  {
      // Создать файл и открыть его на запись.
      f_open(&MyFile, "Tyt_napisali.txt", FA_CREATE_NEW | FA_WRITE);
 8000b04:	2206      	movs	r2, #6
 8000b06:	4930      	ldr	r1, [pc, #192]	; (8000bc8 <main+0xec>)
 8000b08:	4830      	ldr	r0, [pc, #192]	; (8000bcc <main+0xf0>)
 8000b0a:	f004 fffb 	bl	8005b04 <f_open>

      // Записать в файл заданный текст.
      res = f_write(&MyFile, wtext, sizeof(wtext), (void*)&byteswritten);
 8000b0e:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <main+0xf4>)
 8000b10:	2215      	movs	r2, #21
 8000b12:	4930      	ldr	r1, [pc, #192]	; (8000bd4 <main+0xf8>)
 8000b14:	482d      	ldr	r0, [pc, #180]	; (8000bcc <main+0xf0>)
 8000b16:	f005 f9c1 	bl	8005e9c <f_write>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <main+0xfc>)
 8000b20:	701a      	strb	r2, [r3, #0]

      // Проверить на качество выполненной задачи.
      if((byteswritten != sizeof(wtext)) || (res != FR_OK))
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <main+0xf4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b15      	cmp	r3, #21
 8000b28:	d112      	bne.n	8000b50 <main+0x74>
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <main+0xfc>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10e      	bne.n	8000b50 <main+0x74>
      }
      else
      {
    	  while (1)
    	    {
    	  HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 8000b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b36:	4829      	ldr	r0, [pc, #164]	; (8000bdc <main+0x100>)
 8000b38:	f000 fd99 	bl	800166e <HAL_GPIO_TogglePin>
    	  HAL_Delay(1000);
 8000b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b40:	f000 faee 	bl	8001120 <HAL_Delay>
    	  HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 8000b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b48:	4824      	ldr	r0, [pc, #144]	; (8000bdc <main+0x100>)
 8000b4a:	f000 fd90 	bl	800166e <HAL_GPIO_TogglePin>
    	  HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 8000b4e:	e7f0      	b.n	8000b32 <main+0x56>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <main+0x104>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	895b      	ldrh	r3, [r3, #10]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <main+0x108>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	fb03 f302 	mul.w	r3, r3, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fda5 	bl	80006b0 <__aeabi_ui2d>
 8000b66:	f04f 0200 	mov.w	r2, #0
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <main+0x10c>)
 8000b6c:	f7ff fb34 	bl	80001d8 <__aeabi_dmul>
 8000b70:	4602      	mov	r2, r0
 8000b72:	460b      	mov	r3, r1
 8000b74:	4610      	mov	r0, r2
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff fe14 	bl	80007a4 <__aeabi_d2uiz>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <main+0x110>)
 8000b80:	6013      	str	r3, [r2, #0]
	  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <main+0x104>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	3b02      	subs	r3, #2
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <main+0x104>)
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	8952      	ldrh	r2, [r2, #10]
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fd8b 	bl	80006b0 <__aeabi_ui2d>
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <main+0x10c>)
 8000ba0:	f7ff fb1a 	bl	80001d8 <__aeabi_dmul>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4610      	mov	r0, r2
 8000baa:	4619      	mov	r1, r3
 8000bac:	f7ff fdfa 	bl	80007a4 <__aeabi_d2uiz>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <main+0x114>)
 8000bb4:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 8000bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bba:	f000 fab1 	bl	8001120 <HAL_Delay>
	  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000bbe:	e7c7      	b.n	8000b50 <main+0x74>
 8000bc0:	20002164 	.word	0x20002164
 8000bc4:	20000068 	.word	0x20000068
 8000bc8:	080062ec 	.word	0x080062ec
 8000bcc:	20001120 	.word	0x20001120
 8000bd0:	20000060 	.word	0x20000060
 8000bd4:	08006344 	.word	0x08006344
 8000bd8:	20002158 	.word	0x20002158
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	20002150 	.word	0x20002150
 8000be4:	2000005c 	.word	0x2000005c
 8000be8:	3fe00000 	.word	0x3fe00000
 8000bec:	20000064 	.word	0x20000064
 8000bf0:	20002154 	.word	0x20002154

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	; 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0320 	add.w	r3, r7, #32
 8000bfe:	2230      	movs	r2, #48	; 0x30
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 fb5e 	bl	80062c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <SystemClock_Config+0xc8>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <SystemClock_Config+0xc8>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <SystemClock_Config+0xc8>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <SystemClock_Config+0xcc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <SystemClock_Config+0xcc>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <SystemClock_Config+0xcc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c50:	2301      	movs	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c64:	230f      	movs	r3, #15
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c68:	2390      	movs	r3, #144	; 0x90
 8000c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c70:	2305      	movs	r3, #5
 8000c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fd13 	bl	80016a4 <HAL_RCC_OscConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c84:	f000 f8ac 	bl	8000de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c88:	230f      	movs	r3, #15
 8000c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 ff75 	bl	8001b94 <HAL_RCC_ClockConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cb0:	f000 f896 	bl	8000de0 <Error_Handler>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3750      	adds	r7, #80	; 0x50
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40007000 	.word	0x40007000

08000cc4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SDIO_SD_Init+0x38>)
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <MX_SDIO_SD_Init+0x3c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_SDIO_SD_Init+0x38>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SDIO_SD_Init+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_SDIO_SD_Init+0x38>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SDIO_SD_Init+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <MX_SDIO_SD_Init+0x38>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <MX_SDIO_SD_Init+0x38>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	2000109c 	.word	0x2000109c
 8000d00:	40012c00 	.word	0x40012c00

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <MX_GPIO_Init+0xd8>)
 8000dae:	f000 fc45 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led4_Pin */
  GPIO_InitStruct.Pin = Led4_Pin;
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led4_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_GPIO_Init+0xd8>)
 8000dcc:	f000 fab2 	bl	8001334 <HAL_GPIO_Init>

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020c00 	.word	0x40020c00

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_MspInit+0x4c>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a40      	ldr	r2, [pc, #256]	; (8000f5c <HAL_SD_MspInit+0x120>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d17a      	bne.n	8000f54 <HAL_SD_MspInit+0x118>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a3e      	ldr	r2, [pc, #248]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a37      	ldr	r2, [pc, #220]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_SD_MspInit+0x124>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481e      	ldr	r0, [pc, #120]	; (8000f64 <HAL_SD_MspInit+0x128>)
 8000eea:	f000 fa23 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f00:	230c      	movs	r3, #12
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <HAL_SD_MspInit+0x12c>)
 8000f0c:	f000 fa12 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000f10:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f22:	230c      	movs	r3, #12
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <HAL_SD_MspInit+0x130>)
 8000f2e:	f000 fa01 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f44:	230c      	movs	r3, #12
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_SD_MspInit+0x128>)
 8000f50:	f000 f9f0 	bl	8001334 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f890 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffd7 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f005 f931 	bl	800627c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fd5f 	bl	8000adc <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800102c:	08006410 	.word	0x08006410
  ldr r2, =_sbss
 8001030:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001034:	200041cc 	.word	0x200041cc

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f931 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff febc 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f93b 	bl	800131a <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f911 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	2000215c 	.word	0x2000215c

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000215c 	.word	0x2000215c

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff47 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff5c 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff8e 	bl	8001220 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffb0 	bl	8001288 <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	e159      	b.n	8001604 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	429a      	cmp	r2, r3
 800136a:	f040 8148 	bne.w	80015fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b01      	cmp	r3, #1
 8001378:	d005      	beq.n	8001386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001382:	2b02      	cmp	r3, #2
 8001384:	d130      	bne.n	80013e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f003 0201 	and.w	r2, r3, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d017      	beq.n	8001424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d123      	bne.n	8001478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	69b9      	ldr	r1, [r7, #24]
 8001474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0203 	and.w	r2, r3, #3
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a2 	beq.w	80015fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b57      	ldr	r3, [pc, #348]	; (800161c <HAL_GPIO_Init+0x2e8>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a56      	ldr	r2, [pc, #344]	; (800161c <HAL_GPIO_Init+0x2e8>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b54      	ldr	r3, [pc, #336]	; (800161c <HAL_GPIO_Init+0x2e8>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d6:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_GPIO_Init+0x2ec>)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a49      	ldr	r2, [pc, #292]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x202>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a48      	ldr	r2, [pc, #288]	; (8001628 <HAL_GPIO_Init+0x2f4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x1fe>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a47      	ldr	r2, [pc, #284]	; (800162c <HAL_GPIO_Init+0x2f8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x1fa>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a46      	ldr	r2, [pc, #280]	; (8001630 <HAL_GPIO_Init+0x2fc>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x1f6>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a45      	ldr	r2, [pc, #276]	; (8001634 <HAL_GPIO_Init+0x300>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x1f2>
 8001522:	2304      	movs	r3, #4
 8001524:	e008      	b.n	8001538 <HAL_GPIO_Init+0x204>
 8001526:	2307      	movs	r3, #7
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x204>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x204>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x204>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x204>
 8001536:	2300      	movs	r3, #0
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	f002 0203 	and.w	r2, r2, #3
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4093      	lsls	r3, r2
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001548:	4935      	ldr	r1, [pc, #212]	; (8001620 <HAL_GPIO_Init+0x2ec>)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001556:	4b38      	ldr	r3, [pc, #224]	; (8001638 <HAL_GPIO_Init+0x304>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157a:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <HAL_GPIO_Init+0x304>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_GPIO_Init+0x304>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a4:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_GPIO_Init+0x304>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015aa:	4b23      	ldr	r3, [pc, #140]	; (8001638 <HAL_GPIO_Init+0x304>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ce:	4a1a      	ldr	r2, [pc, #104]	; (8001638 <HAL_GPIO_Init+0x304>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_GPIO_Init+0x304>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_GPIO_Init+0x304>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3301      	adds	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	f67f aea2 	bls.w	8001350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40013800 	.word	0x40013800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020400 	.word	0x40020400
 800162c:	40020800 	.word	0x40020800
 8001630:	40020c00 	.word	0x40020c00
 8001634:	40021000 	.word	0x40021000
 8001638:	40013c00 	.word	0x40013c00

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001658:	e003      	b.n	8001662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	041a      	lsls	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001680:	887a      	ldrh	r2, [r7, #2]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	041a      	lsls	r2, r3, #16
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43d9      	mvns	r1, r3
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	400b      	ands	r3, r1
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e264      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d075      	beq.n	80017ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016c2:	4ba3      	ldr	r3, [pc, #652]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d00c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ce:	4ba0      	ldr	r3, [pc, #640]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d112      	bne.n	8001700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016da:	4b9d      	ldr	r3, [pc, #628]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4b99      	ldr	r3, [pc, #612]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d05b      	beq.n	80017ac <HAL_RCC_OscConfig+0x108>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d157      	bne.n	80017ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e23f      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x74>
 800170a:	4b91      	ldr	r3, [pc, #580]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a90      	ldr	r2, [pc, #576]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xb0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x98>
 8001722:	4b8b      	ldr	r3, [pc, #556]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a8a      	ldr	r2, [pc, #552]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a87      	ldr	r2, [pc, #540]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xb0>
 800173c:	4b84      	ldr	r3, [pc, #528]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a83      	ldr	r2, [pc, #524]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b81      	ldr	r3, [pc, #516]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a80      	ldr	r2, [pc, #512]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fcd4 	bl	8001108 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fcd0 	bl	8001108 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	; 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e204      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b76      	ldr	r3, [pc, #472]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xc0>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fcc0 	bl	8001108 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fcbc 	bl	8001108 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1f0      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0xe8>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b62      	ldr	r3, [pc, #392]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d2:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x152>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1c4      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b56      	ldr	r3, [pc, #344]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4952      	ldr	r1, [pc, #328]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	e03a      	b.n	8001882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001814:	4b4f      	ldr	r3, [pc, #316]	; (8001954 <HAL_RCC_OscConfig+0x2b0>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fc75 	bl	8001108 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fc71 	bl	8001108 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1a5      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	4b46      	ldr	r3, [pc, #280]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4940      	ldr	r1, [pc, #256]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_OscConfig+0x2b0>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fc54 	bl	8001108 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fc50 	bl	8001108 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e184      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b36      	ldr	r3, [pc, #216]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d030      	beq.n	80018f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d016      	beq.n	80018c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_RCC_OscConfig+0x2b4>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fc34 	bl	8001108 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fc30 	bl	8001108 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e164      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x200>
 80018c2:	e015      	b.n	80018f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_RCC_OscConfig+0x2b4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff fc1d 	bl	8001108 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d2:	f7ff fc19 	bl	8001108 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e14d      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 80018e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80a0 	beq.w	8001a3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x2b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d121      	bne.n	800197e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_RCC_OscConfig+0x2b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_RCC_OscConfig+0x2b8>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff fbdf 	bl	8001108 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e011      	b.n	8001972 <HAL_RCC_OscConfig+0x2ce>
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	42470000 	.word	0x42470000
 8001958:	42470e80 	.word	0x42470e80
 800195c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001960:	f7ff fbd2 	bl	8001108 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e106      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b85      	ldr	r3, [pc, #532]	; (8001b88 <HAL_RCC_OscConfig+0x4e4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d106      	bne.n	8001994 <HAL_RCC_OscConfig+0x2f0>
 8001986:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198a:	4a80      	ldr	r2, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6713      	str	r3, [r2, #112]	; 0x70
 8001992:	e01c      	b.n	80019ce <HAL_RCC_OscConfig+0x32a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d10c      	bne.n	80019b6 <HAL_RCC_OscConfig+0x312>
 800199c:	4b7b      	ldr	r3, [pc, #492]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a7a      	ldr	r2, [pc, #488]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
 80019a8:	4b78      	ldr	r3, [pc, #480]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ac:	4a77      	ldr	r2, [pc, #476]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6713      	str	r3, [r2, #112]	; 0x70
 80019b4:	e00b      	b.n	80019ce <HAL_RCC_OscConfig+0x32a>
 80019b6:	4b75      	ldr	r3, [pc, #468]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	4a74      	ldr	r2, [pc, #464]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70
 80019c2:	4b72      	ldr	r3, [pc, #456]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	4a71      	ldr	r2, [pc, #452]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 80019c8:	f023 0304 	bic.w	r3, r3, #4
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d015      	beq.n	8001a02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff fb97 	bl	8001108 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fb93 	bl	8001108 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0c5      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ee      	beq.n	80019de <HAL_RCC_OscConfig+0x33a>
 8001a00:	e014      	b.n	8001a2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fb81 	bl	8001108 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fb7d 	bl	8001108 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0af      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a20:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ee      	bne.n	8001a0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a55      	ldr	r2, [pc, #340]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 809b 	beq.w	8001b7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d05c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d141      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5c:	4b4c      	ldr	r3, [pc, #304]	; (8001b90 <HAL_RCC_OscConfig+0x4ec>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff fb51 	bl	8001108 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff fb4d 	bl	8001108 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e081      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	019b      	lsls	r3, r3, #6
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
 8001aac:	4937      	ldr	r1, [pc, #220]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_RCC_OscConfig+0x4ec>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fb26 	bl	8001108 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fb22 	bl	8001108 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e056      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x41c>
 8001ade:	e04e      	b.n	8001b7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_OscConfig+0x4ec>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb0f 	bl	8001108 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fb0b 	bl	8001108 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e03f      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x44a>
 8001b0c:	e037      	b.n	8001b7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e032      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_OscConfig+0x4e8>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d028      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d121      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d11a      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d111      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	3b01      	subs	r3, #1
 8001b64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	42470060 	.word	0x42470060

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cc      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d90c      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d044      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d119      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e067      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4934      	ldr	r1, [pc, #208]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff fa40 	bl	8001108 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff fa3c 	bl	8001108 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e04f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d20c      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f821 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f9a0 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00
 8001d50:	40023800 	.word	0x40023800
 8001d54:	0800635c 	.word	0x0800635c
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d66:	2100      	movs	r1, #0
 8001d68:	6079      	str	r1, [r7, #4]
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	60f9      	str	r1, [r7, #12]
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d72:	2100      	movs	r1, #0
 8001d74:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d76:	4952      	ldr	r1, [pc, #328]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d78:	6889      	ldr	r1, [r1, #8]
 8001d7a:	f001 010c 	and.w	r1, r1, #12
 8001d7e:	2908      	cmp	r1, #8
 8001d80:	d00d      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x3e>
 8001d82:	2908      	cmp	r1, #8
 8001d84:	f200 8094 	bhi.w	8001eb0 <HAL_RCC_GetSysClockFreq+0x150>
 8001d88:	2900      	cmp	r1, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x32>
 8001d8c:	2904      	cmp	r1, #4
 8001d8e:	d003      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x38>
 8001d90:	e08e      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d92:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d94:	60bb      	str	r3, [r7, #8]
       break;
 8001d96:	e08e      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d9a:	60bb      	str	r3, [r7, #8]
      break;
 8001d9c:	e08b      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9e:	4948      	ldr	r1, [pc, #288]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001da0:	6849      	ldr	r1, [r1, #4]
 8001da2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001da6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da8:	4945      	ldr	r1, [pc, #276]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001daa:	6849      	ldr	r1, [r1, #4]
 8001dac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001db0:	2900      	cmp	r1, #0
 8001db2:	d024      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db4:	4942      	ldr	r1, [pc, #264]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001db6:	6849      	ldr	r1, [r1, #4]
 8001db8:	0989      	lsrs	r1, r1, #6
 8001dba:	4608      	mov	r0, r1
 8001dbc:	f04f 0100 	mov.w	r1, #0
 8001dc0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001dc4:	f04f 0500 	mov.w	r5, #0
 8001dc8:	ea00 0204 	and.w	r2, r0, r4
 8001dcc:	ea01 0305 	and.w	r3, r1, r5
 8001dd0:	493d      	ldr	r1, [pc, #244]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001dd2:	fb01 f003 	mul.w	r0, r1, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	fb01 f102 	mul.w	r1, r1, r2
 8001ddc:	1844      	adds	r4, r0, r1
 8001dde:	493a      	ldr	r1, [pc, #232]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001de0:	fba2 0101 	umull	r0, r1, r2, r1
 8001de4:	1863      	adds	r3, r4, r1
 8001de6:	4619      	mov	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	f7fe fcf8 	bl	80007e4 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e04a      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfe:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	099b      	lsrs	r3, r3, #6
 8001e04:	461a      	mov	r2, r3
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e0e:	f04f 0100 	mov.w	r1, #0
 8001e12:	ea02 0400 	and.w	r4, r2, r0
 8001e16:	ea03 0501 	and.w	r5, r3, r1
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	014b      	lsls	r3, r1, #5
 8001e28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e2c:	0142      	lsls	r2, r0, #5
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	1b00      	subs	r0, r0, r4
 8001e34:	eb61 0105 	sbc.w	r1, r1, r5
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	018b      	lsls	r3, r1, #6
 8001e42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e46:	0182      	lsls	r2, r0, #6
 8001e48:	1a12      	subs	r2, r2, r0
 8001e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	00d9      	lsls	r1, r3, #3
 8001e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e5c:	00d0      	lsls	r0, r2, #3
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	1912      	adds	r2, r2, r4
 8001e64:	eb45 0303 	adc.w	r3, r5, r3
 8001e68:	f04f 0000 	mov.w	r0, #0
 8001e6c:	f04f 0100 	mov.w	r1, #0
 8001e70:	0299      	lsls	r1, r3, #10
 8001e72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e76:	0290      	lsls	r0, r2, #10
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	f7fe fcac 	bl	80007e4 <__aeabi_uldivmod>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4613      	mov	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	60bb      	str	r3, [r7, #8]
      break;
 8001eae:	e002      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001eb2:	60bb      	str	r3, [r7, #8]
      break;
 8001eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	017d7840 	.word	0x017d7840

08001ecc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e022      	b.n	8001f24 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7fe ffa3 	bl	8000e3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f814 	bl	8001f2c <HAL_SD_InitCard>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00a      	b.n	8001f24 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af04      	add	r7, sp, #16
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001f48:	2376      	movs	r3, #118	; 0x76
 8001f4a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681d      	ldr	r5, [r3, #0]
 8001f50:	466c      	mov	r4, sp
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f64:	4628      	mov	r0, r5
 8001f66:	f001 f938 	bl	80031da <SDIO_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e04c      	b.n	8002016 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_SD_InitCard+0xf4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f970 	bl	800326c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_SD_InitCard+0xf4>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 ff02 	bl	8002d9c <SD_PowerON>
 8001f98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00b      	beq.n	8001fb8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e02e      	b.n	8002016 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fe23 	bl	8002c04 <SD_InitCard>
 8001fbe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e01b      	b.n	8002016 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 f9d3 	bl	8003392 <SDMMC_CmdBlockLength>
 8001fec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00f      	beq.n	8002014 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_SD_InitCard+0xf8>)
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bdb0      	pop	{r4, r5, r7, pc}
 800201e:	bf00      	nop
 8002020:	422580a0 	.word	0x422580a0
 8002024:	004005ff 	.word	0x004005ff

08002028 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b092      	sub	sp, #72	; 0x48
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002036:	f7ff f867 	bl	8001108 <HAL_GetTick>
 800203a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1bd      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	f040 81b0 	bne.w	80023c8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800206e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	441a      	add	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	429a      	cmp	r2, r3
 800207a:	d907      	bls.n	800208c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e1a4      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2203      	movs	r2, #3
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d002      	beq.n	80020aa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	025b      	lsls	r3, r3, #9
 80020a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80020b6:	2390      	movs	r3, #144	; 0x90
 80020b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80020ba:	2302      	movs	r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f107 0214 	add.w	r2, r7, #20
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 f932 	bl	800333a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d90a      	bls.n	80020f2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2202      	movs	r2, #2
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f996 	bl	800341a <SDMMC_CmdReadMultiBlock>
 80020ee:	6478      	str	r0, [r7, #68]	; 0x44
 80020f0:	e009      	b.n	8002106 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020fe:	4618      	mov	r0, r3
 8002100:	f001 f969 	bl	80033d6 <SDMMC_CmdReadSingleBlock>
 8002104:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002108:	2b00      	cmp	r3, #0
 800210a:	d012      	beq.n	8002132 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7a      	ldr	r2, [pc, #488]	; (80022fc <HAL_SD_ReadBlocks+0x2d4>)
 8002112:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	431a      	orrs	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e151      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002136:	e061      	b.n	80021fc <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d03c      	beq.n	80021c0 <HAL_SD_ReadBlocks+0x198>
 8002146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d039      	beq.n	80021c0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800214c:	2300      	movs	r3, #0
 800214e:	643b      	str	r3, [r7, #64]	; 0x40
 8002150:	e033      	b.n	80021ba <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f001 f86a 	bl	8003230 <SDIO_ReadFIFO>
 800215c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	b2da      	uxtb	r2, r3
 8002162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002164:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002168:	3301      	adds	r3, #1
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800216c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216e:	3b01      	subs	r3, #1
 8002170:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	b2da      	uxtb	r2, r3
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	3301      	adds	r3, #1
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002184:	3b01      	subs	r3, #1
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	0c1b      	lsrs	r3, r3, #16
 800218c:	b2da      	uxtb	r2, r3
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	3301      	adds	r3, #1
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219a:	3b01      	subs	r3, #1
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	0e1b      	lsrs	r3, r3, #24
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80021a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021aa:	3301      	adds	r3, #1
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80021ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b0:	3b01      	subs	r3, #1
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80021b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b6:	3301      	adds	r3, #1
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	2b07      	cmp	r3, #7
 80021be:	d9c8      	bls.n	8002152 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80021c0:	f7fe ffa2 	bl	8001108 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d902      	bls.n	80021d6 <HAL_SD_ReadBlocks+0x1ae>
 80021d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d112      	bne.n	80021fc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a48      	ldr	r2, [pc, #288]	; (80022fc <HAL_SD_ReadBlocks+0x2d4>)
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0ec      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002202:	f240 332a 	movw	r3, #810	; 0x32a
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d095      	beq.n	8002138 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d022      	beq.n	8002260 <HAL_SD_ReadBlocks+0x238>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d91f      	bls.n	8002260 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	2b03      	cmp	r3, #3
 8002226:	d01b      	beq.n	8002260 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f001 f95b 	bl	80034e8 <SDMMC_CmdStopTransfer>
 8002232:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2f      	ldr	r2, [pc, #188]	; (80022fc <HAL_SD_ReadBlocks+0x2d4>)
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0ba      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d012      	beq.n	8002294 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_SD_ReadBlocks+0x2d4>)
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	f043 0208 	orr.w	r2, r3, #8
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0a0      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_SD_ReadBlocks+0x2d4>)
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	f043 0202 	orr.w	r2, r3, #2
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e086      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_SD_ReadBlocks+0x2d4>)
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e06c      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
 80022fc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 ff93 	bl	8003230 <SDIO_ReadFIFO>
 800230a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	b2da      	uxtb	r2, r3
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	3301      	adds	r3, #1
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800231a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231c:	3b01      	subs	r3, #1
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b2da      	uxtb	r2, r3
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800232a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232c:	3301      	adds	r3, #1
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002332:	3b01      	subs	r3, #1
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	b2da      	uxtb	r2, r3
 800233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002342:	3301      	adds	r3, #1
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002348:	3b01      	subs	r3, #1
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	0e1b      	lsrs	r3, r3, #24
 8002350:	b2da      	uxtb	r2, r3
 8002352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002354:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002358:	3301      	adds	r3, #1
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800235c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235e:	3b01      	subs	r3, #1
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002362:	f7fe fed1 	bl	8001108 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800236e:	429a      	cmp	r2, r3
 8002370:	d902      	bls.n	8002378 <HAL_SD_ReadBlocks+0x350>
 8002372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d112      	bne.n	800239e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_SD_ReadBlocks+0x3b8>)
 800237e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e01b      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_SD_ReadBlocks+0x38a>
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1a6      	bne.n	8002300 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e006      	b.n	80023d6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
  }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3748      	adds	r7, #72	; 0x48
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	004005ff 	.word	0x004005ff

080023e4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b092      	sub	sp, #72	; 0x48
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80023f2:	f7fe fe89 	bl	8001108 <HAL_GetTick>
 80023f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e166      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	f040 8159 	bne.w	80026d6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800242a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	441a      	add	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	429a      	cmp	r2, r3
 8002436:	d907      	bls.n	8002448 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e14d      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2203      	movs	r2, #3
 800244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	2b01      	cmp	r3, #1
 800245e:	d002      	beq.n	8002466 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002462:	025b      	lsls	r3, r3, #9
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	025b      	lsls	r3, r3, #9
 8002470:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002472:	2390      	movs	r3, #144	; 0x90
 8002474:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800247e:	2301      	movs	r3, #1
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f107 0218 	add.w	r2, r7, #24
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f000 ff54 	bl	800333a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d90a      	bls.n	80024ae <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fffc 	bl	80034a2 <SDMMC_CmdWriteMultiBlock>
 80024aa:	6478      	str	r0, [r7, #68]	; 0x44
 80024ac:	e009      	b.n	80024c2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2210      	movs	r2, #16
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 ffcf 	bl	800345e <SDMMC_CmdWriteSingleBlock>
 80024c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80024c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a87      	ldr	r2, [pc, #540]	; (80026ec <HAL_SD_WriteBlocks+0x308>)
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0fa      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80024f2:	e065      	b.n	80025c0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d040      	beq.n	8002584 <HAL_SD_WriteBlocks+0x1a0>
 8002502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d03d      	beq.n	8002584 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002508:	2300      	movs	r3, #0
 800250a:	643b      	str	r3, [r7, #64]	; 0x40
 800250c:	e037      	b.n	800257e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002516:	3301      	adds	r3, #1
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800251a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251c:	3b01      	subs	r3, #1
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800252c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252e:	3301      	adds	r3, #1
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	3b01      	subs	r3, #1
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002546:	3301      	adds	r3, #1
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800254a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254c:	3b01      	subs	r3, #1
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	061a      	lsls	r2, r3, #24
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	3301      	adds	r3, #1
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002564:	3b01      	subs	r3, #1
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f107 0214 	add.w	r2, r7, #20
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fe69 	bl	800324a <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257a:	3301      	adds	r3, #1
 800257c:	643b      	str	r3, [r7, #64]	; 0x40
 800257e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002580:	2b07      	cmp	r3, #7
 8002582:	d9c4      	bls.n	800250e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002584:	f7fe fdc0 	bl	8001108 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002590:	429a      	cmp	r2, r3
 8002592:	d902      	bls.n	800259a <HAL_SD_WriteBlocks+0x1b6>
 8002594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d112      	bne.n	80025c0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a53      	ldr	r2, [pc, #332]	; (80026ec <HAL_SD_WriteBlocks+0x308>)
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e091      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c6:	f240 331a 	movw	r3, #794	; 0x31a
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d091      	beq.n	80024f4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d022      	beq.n	8002624 <HAL_SD_WriteBlocks+0x240>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d91f      	bls.n	8002624 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d01b      	beq.n	8002624 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 ff79 	bl	80034e8 <SDMMC_CmdStopTransfer>
 80025f6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80025f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d012      	beq.n	8002624 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a3a      	ldr	r2, [pc, #232]	; (80026ec <HAL_SD_WriteBlocks+0x308>)
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e05f      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2d      	ldr	r2, [pc, #180]	; (80026ec <HAL_SD_WriteBlocks+0x308>)
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	f043 0208 	orr.w	r2, r3, #8
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e045      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a20      	ldr	r2, [pc, #128]	; (80026ec <HAL_SD_WriteBlocks+0x308>)
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	f043 0202 	orr.w	r2, r3, #2
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e02b      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	d012      	beq.n	80026c0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_SD_WriteBlocks+0x308>)
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	f043 0210 	orr.w	r2, r3, #16
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e011      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e006      	b.n	80026e4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3748      	adds	r7, #72	; 0x48
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	004005ff 	.word	0x004005ff

080026f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026fe:	0f9b      	lsrs	r3, r3, #30
 8002700:	b2da      	uxtb	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	b2da      	uxtb	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271c:	0e1b      	lsrs	r3, r3, #24
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	b2da      	uxtb	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800272e:	0c1b      	lsrs	r3, r3, #16
 8002730:	b2da      	uxtb	r2, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b2da      	uxtb	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002746:	b2da      	uxtb	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002750:	0d1b      	lsrs	r3, r3, #20
 8002752:	b29a      	uxth	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	b2da      	uxtb	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800276e:	0bdb      	lsrs	r3, r3, #15
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002780:	0b9b      	lsrs	r3, r3, #14
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002792:	0b5b      	lsrs	r3, r3, #13
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a4:	0b1b      	lsrs	r3, r3, #12
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d163      	bne.n	8002888 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c4:	009a      	lsls	r2, r3, #2
 80027c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027ca:	4013      	ands	r3, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80027d0:	0f92      	lsrs	r2, r2, #30
 80027d2:	431a      	orrs	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027dc:	0edb      	lsrs	r3, r3, #27
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ee:	0e1b      	lsrs	r3, r3, #24
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002800:	0d5b      	lsrs	r3, r3, #21
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	b2da      	uxtb	r2, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	b2da      	uxtb	r2, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002824:	0bdb      	lsrs	r3, r3, #15
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	b2da      	uxtb	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	7e1b      	ldrb	r3, [r3, #24]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	3302      	adds	r3, #2
 8002848:	2201      	movs	r2, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002852:	fb02 f203 	mul.w	r2, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	7a1b      	ldrb	r3, [r3, #8]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	2201      	movs	r2, #1
 8002866:	409a      	lsls	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002874:	0a52      	lsrs	r2, r2, #9
 8002876:	fb02 f203 	mul.w	r2, r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002884:	661a      	str	r2, [r3, #96]	; 0x60
 8002886:	e031      	b.n	80028ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	2b01      	cmp	r3, #1
 800288e:	d11d      	bne.n	80028cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289e:	0c1b      	lsrs	r3, r3, #16
 80028a0:	431a      	orrs	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	3301      	adds	r3, #1
 80028ac:	029a      	lsls	r2, r3, #10
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	661a      	str	r2, [r3, #96]	; 0x60
 80028ca:	e00f      	b.n	80028ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_SD_GetCardCSD+0x344>)
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e09d      	b.n	8002a28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f0:	0b9b      	lsrs	r3, r3, #14
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002902:	09db      	lsrs	r3, r3, #7
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800290a:	b2da      	uxtb	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800291a:	b2da      	uxtb	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	0fdb      	lsrs	r3, r3, #31
 8002926:	b2da      	uxtb	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	0f5b      	lsrs	r3, r3, #29
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	b2da      	uxtb	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	0e9b      	lsrs	r3, r3, #26
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	b2da      	uxtb	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	0d9b      	lsrs	r3, r3, #22
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	b2da      	uxtb	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	0d5b      	lsrs	r3, r3, #21
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	b2da      	uxtb	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	0c1b      	lsrs	r3, r3, #16
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	0bdb      	lsrs	r3, r3, #15
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	0b9b      	lsrs	r3, r3, #14
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	0b5b      	lsrs	r3, r3, #13
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	0b1b      	lsrs	r3, r3, #12
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	0a9b      	lsrs	r3, r3, #10
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	004005ff 	.word	0x004005ff

08002a38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b08e      	sub	sp, #56	; 0x38
 8002a94:	af04      	add	r7, sp, #16
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d02e      	beq.n	8002b0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ac4:	e029      	b.n	8002b1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002acc:	d10a      	bne.n	8002ae4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa1a 	bl	8002f08 <SD_WideBus_Enable>
 8002ad4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae2:	e01a      	b.n	8002b1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa57 	bl	8002f9e <SD_WideBus_Disable>
 8002af0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
 8002afe:	e00c      	b.n	8002b1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b0c:	e005      	b.n	8002b1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b38:	e01f      	b.n	8002b7a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681d      	ldr	r5, [r3, #0]
 8002b60:	466c      	mov	r4, sp
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b6e:	f107 0308 	add.w	r3, r7, #8
 8002b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b74:	4628      	mov	r0, r5
 8002b76:	f000 fb30 	bl	80031da <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fc05 	bl	8003392 <SDMMC_CmdBlockLength>
 8002b88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3728      	adds	r7, #40	; 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	004005ff 	.word	0x004005ff

08002bc4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f96e 	bl	8002eb8 <SD_SendStatus>
 8002bdc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002bfa:	693b      	ldr	r3, [r7, #16]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b094      	sub	sp, #80	; 0x50
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fb38 	bl	800328a <SDIO_GetPowerState>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c24:	e0b6      	b.n	8002d94 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d02f      	beq.n	8002c8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fd62 	bl	80036fc <SDMMC_CmdSendCID>
 8002c38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SD_InitCard+0x40>
    {
      return errorstate;
 8002c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c42:	e0a7      	b.n	8002d94 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fb62 	bl	8003314 <SDIO_GetResponse>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fb59 	bl	8003314 <SDIO_GetResponse>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2108      	movs	r1, #8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fb50 	bl	8003314 <SDIO_GetResponse>
 8002c74:	4602      	mov	r2, r0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	210c      	movs	r1, #12
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fb47 	bl	8003314 <SDIO_GetResponse>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d00d      	beq.n	8002cb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f107 020e 	add.w	r2, r7, #14
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fd68 	bl	8003776 <SDMMC_CmdSetRelAdd>
 8002ca6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8002cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb0:	e070      	b.n	8002d94 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d036      	beq.n	8002d28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f000 fd32 	bl	8003738 <SDMMC_CmdSendCSD>
 8002cd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cde:	e059      	b.n	8002d94 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fb14 	bl	8003314 <SDIO_GetResponse>
 8002cec:	4602      	mov	r2, r0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fb0b 	bl	8003314 <SDIO_GetResponse>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2108      	movs	r1, #8
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fb02 	bl	8003314 <SDIO_GetResponse>
 8002d10:	4602      	mov	r2, r0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	210c      	movs	r1, #12
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 faf9 	bl	8003314 <SDIO_GetResponse>
 8002d22:	4602      	mov	r2, r0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2104      	movs	r1, #4
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 faf0 	bl	8003314 <SDIO_GetResponse>
 8002d34:	4603      	mov	r3, r0
 8002d36:	0d1a      	lsrs	r2, r3, #20
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002d3c:	f107 0310 	add.w	r3, r7, #16
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fcd4 	bl	80026f0 <HAL_SD_GetCardCSD>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d52:	e01f      	b.n	8002d94 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	4608      	mov	r0, r1
 8002d66:	f000 fbe1 	bl	800352c <SDMMC_CmdSelDesel>
 8002d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SD_InitCard+0x172>
  {
    return errorstate;
 8002d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d74:	e00e      	b.n	8002d94 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681d      	ldr	r5, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	466c      	mov	r4, sp
 8002d7e:	f103 0210 	add.w	r2, r3, #16
 8002d82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d88:	3304      	adds	r3, #4
 8002d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f000 fa24 	bl	80031da <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3740      	adds	r7, #64	; 0x40
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bdb0      	pop	{r4, r5, r7, pc}

08002d9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fbdc 	bl	8003572 <SDMMC_CmdGoIdleState>
 8002dba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	e072      	b.n	8002eac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fbef 	bl	80035ae <SDMMC_CmdOperCond>
 8002dd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00d      	beq.n	8002df4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fbc5 	bl	8003572 <SDMMC_CmdGoIdleState>
 8002de8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <SD_PowerON+0x5e>
    {
      return errorstate;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	e05b      	b.n	8002eac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d137      	bne.n	8002e72 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fbef 	bl	80035ec <SDMMC_CmdAppCommand>
 8002e0e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d02d      	beq.n	8002e72 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e1a:	e047      	b.n	8002eac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fbe2 	bl	80035ec <SDMMC_CmdAppCommand>
 8002e28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <SD_PowerON+0x98>
    {
      return errorstate;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	e03b      	b.n	8002eac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	491e      	ldr	r1, [pc, #120]	; (8002eb4 <SD_PowerON+0x118>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fbf8 	bl	8003630 <SDMMC_CmdAppOperCommand>
 8002e40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e4c:	e02e      	b.n	8002eac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fa5d 	bl	8003314 <SDIO_GetResponse>
 8002e5a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	0fdb      	lsrs	r3, r3, #31
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <SD_PowerON+0xcc>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <SD_PowerON+0xce>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]

    count++;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d802      	bhi.n	8002e82 <SD_PowerON+0xe6>
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0cc      	beq.n	8002e1c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d902      	bls.n	8002e92 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e90:	e00c      	b.n	8002eac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ea2:	e002      	b.n	8002eaa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	c1100000 	.word	0xc1100000

08002eb8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002ec8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ecc:	e018      	b.n	8002f00 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed6:	041b      	lsls	r3, r3, #16
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f000 fc6c 	bl	80037b8 <SDMMC_CmdSendStatus>
 8002ee0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <SD_SendStatus+0x34>
  {
    return errorstate;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	e009      	b.n	8002f00 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fa0e 	bl	8003314 <SDIO_GetResponse>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f9f8 	bl	8003314 <SDIO_GetResponse>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f2e:	d102      	bne.n	8002f36 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f34:	e02f      	b.n	8002f96 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f879 	bl	8003034 <SD_FindSCR>
 8002f42:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	e023      	b.n	8002f96 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01c      	beq.n	8002f92 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f000 fb41 	bl	80035ec <SDMMC_CmdAppCommand>
 8002f6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	e00f      	b.n	8002f96 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fb7a 	bl	8003676 <SDMMC_CmdBusWidth>
 8002f82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	e003      	b.n	8002f96 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e001      	b.n	8002f96 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f9ad 	bl	8003314 <SDIO_GetResponse>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fc4:	d102      	bne.n	8002fcc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fca:	e02f      	b.n	800302c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f82e 	bl	8003034 <SD_FindSCR>
 8002fd8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	e023      	b.n	800302c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01c      	beq.n	8003028 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f000 faf6 	bl	80035ec <SDMMC_CmdAppCommand>
 8003000:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	e00f      	b.n	800302c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fb2f 	bl	8003676 <SDMMC_CmdBusWidth>
 8003018:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	e003      	b.n	800302c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003024:	2300      	movs	r3, #0
 8003026:	e001      	b.n	800302c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003028:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b08f      	sub	sp, #60	; 0x3c
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800303e:	f7fe f863 	bl	8001108 <HAL_GetTick>
 8003042:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2108      	movs	r1, #8
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f999 	bl	8003392 <SDMMC_CmdBlockLength>
 8003060:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	e0b2      	b.n	80031d2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f000 fab7 	bl	80035ec <SDMMC_CmdAppCommand>
 800307e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	e0a3      	b.n	80031d2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003090:	2308      	movs	r3, #8
 8003092:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003094:	2330      	movs	r3, #48	; 0x30
 8003096:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003098:	2302      	movs	r3, #2
 800309a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f107 0210 	add.w	r2, r7, #16
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f943 	bl	800333a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fafe 	bl	80036ba <SDMMC_CmdSendSCR>
 80030be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d02a      	beq.n	800311c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	e083      	b.n	80031d2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00f      	beq.n	80030f8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	f107 0208 	add.w	r2, r7, #8
 80030e4:	18d4      	adds	r4, r2, r3
 80030e6:	4608      	mov	r0, r1
 80030e8:	f000 f8a2 	bl	8003230 <SDIO_ReadFIFO>
 80030ec:	4603      	mov	r3, r0
 80030ee:	6023      	str	r3, [r4, #0]
      index++;
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f2:	3301      	adds	r3, #1
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
 80030f6:	e006      	b.n	8003106 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003106:	f7fd ffff 	bl	8001108 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d102      	bne.n	800311c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800311a:	e05a      	b.n	80031d2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0cf      	beq.n	80030ca <SD_FindSCR+0x96>
 800312a:	e000      	b.n	800312e <SD_FindSCR+0xfa>
      break;
 800312c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2208      	movs	r2, #8
 8003142:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003144:	2308      	movs	r3, #8
 8003146:	e044      	b.n	80031d2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2202      	movs	r2, #2
 800315c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800315e:	2302      	movs	r3, #2
 8003160:	e037      	b.n	80031d2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2220      	movs	r2, #32
 8003176:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003178:	2320      	movs	r3, #32
 800317a:	e02a      	b.n	80031d2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f240 523a 	movw	r2, #1338	; 0x53a
 8003184:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	061a      	lsls	r2, r3, #24
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003192:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800319c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	0e1b      	lsrs	r3, r3, #24
 80031a2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	601a      	str	r2, [r3, #0]
    scr++;
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	3304      	adds	r3, #4
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	061a      	lsls	r2, r3, #24
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80031c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0e1b      	lsrs	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	373c      	adds	r7, #60	; 0x3c
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}

080031da <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80031da:	b084      	sub	sp, #16
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	f107 001c 	add.w	r0, r7, #28
 80031e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80031f0:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80031f2:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80031f4:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80031f8:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80031fc:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003200:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003204:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003214:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	b004      	add	sp, #16
 800322e:	4770      	bx	lr

08003230 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2203      	movs	r2, #3
 8003278:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800327a:	2002      	movs	r0, #2
 800327c:	f7fd ff50 	bl	8001120 <HAL_Delay>
  
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0303 	and.w	r3, r3, #3
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80032c4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80032ca:	431a      	orrs	r2, r3
                       Command->CPSM);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80032d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80032e0:	f023 030f 	bic.w	r3, r3, #15
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	b2db      	uxtb	r3, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3314      	adds	r3, #20
 8003322:	461a      	mov	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
}  
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003360:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003366:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800336c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003384:	2300      	movs	r3, #0

}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b088      	sub	sp, #32
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80033a0:	2310      	movs	r3, #16
 80033a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033a4:	2340      	movs	r3, #64	; 0x40
 80033a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033b2:	f107 0308 	add.w	r3, r7, #8
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff74 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	2110      	movs	r1, #16
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fa45 	bl	8003854 <SDMMC_GetCmdResp1>
 80033ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033cc:	69fb      	ldr	r3, [r7, #28]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b088      	sub	sp, #32
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80033e4:	2311      	movs	r3, #17
 80033e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033e8:	2340      	movs	r3, #64	; 0x40
 80033ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff52 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	2111      	movs	r1, #17
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa23 	bl	8003854 <SDMMC_GetCmdResp1>
 800340e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003410:	69fb      	ldr	r3, [r7, #28]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b088      	sub	sp, #32
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003428:	2312      	movs	r3, #18
 800342a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800342c:	2340      	movs	r3, #64	; 0x40
 800342e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003438:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800343a:	f107 0308 	add.w	r3, r7, #8
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff30 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	2112      	movs	r1, #18
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fa01 	bl	8003854 <SDMMC_GetCmdResp1>
 8003452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003454:	69fb      	ldr	r3, [r7, #28]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800346c:	2318      	movs	r3, #24
 800346e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800347c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800347e:	f107 0308 	add.w	r3, r7, #8
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff0e 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	2118      	movs	r1, #24
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f9df 	bl	8003854 <SDMMC_GetCmdResp1>
 8003496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003498:	69fb      	ldr	r3, [r7, #28]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b088      	sub	sp, #32
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80034b0:	2319      	movs	r3, #25
 80034b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034b4:	2340      	movs	r3, #64	; 0x40
 80034b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034c2:	f107 0308 	add.w	r3, r7, #8
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff feec 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	2119      	movs	r1, #25
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f9bd 	bl	8003854 <SDMMC_GetCmdResp1>
 80034da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034dc:	69fb      	ldr	r3, [r7, #28]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80034f4:	230c      	movs	r3, #12
 80034f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034f8:	2340      	movs	r3, #64	; 0x40
 80034fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003504:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff feca 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <SDMMC_CmdStopTransfer+0x40>)
 8003514:	210c      	movs	r1, #12
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f99c 	bl	8003854 <SDMMC_GetCmdResp1>
 800351c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800351e:	69fb      	ldr	r3, [r7, #28]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3720      	adds	r7, #32
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	05f5e100 	.word	0x05f5e100

0800352c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800353c:	2307      	movs	r3, #7
 800353e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003540:	2340      	movs	r3, #64	; 0x40
 8003542:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800354e:	f107 0310 	add.w	r3, r7, #16
 8003552:	4619      	mov	r1, r3
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff fea6 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	2107      	movs	r1, #7
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f977 	bl	8003854 <SDMMC_GetCmdResp1>
 8003566:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800356a:	4618      	mov	r0, r3
 800356c:	3728      	adds	r7, #40	; 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b088      	sub	sp, #32
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800358a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800358e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fe85 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f92d 	bl	80037fc <SDMMC_GetCmdError>
 80035a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035a4:	69fb      	ldr	r3, [r7, #28]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80035b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80035ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80035bc:	2308      	movs	r3, #8
 80035be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035ce:	f107 0308 	add.w	r3, r7, #8
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fe66 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fb24 	bl	8003c28 <SDMMC_GetCmdResp7>
 80035e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035e2:	69fb      	ldr	r3, [r7, #28]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80035fa:	2337      	movs	r3, #55	; 0x37
 80035fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800360a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800360c:	f107 0308 	add.w	r3, r7, #8
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fe47 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	2137      	movs	r1, #55	; 0x37
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f918 	bl	8003854 <SDMMC_GetCmdResp1>
 8003624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003626:	69fb      	ldr	r3, [r7, #28]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003646:	2329      	movs	r3, #41	; 0x29
 8003648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003656:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fe21 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fa2b 	bl	8003ac0 <SDMMC_GetCmdResp3>
 800366a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800366c:	69fb      	ldr	r3, [r7, #28]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b088      	sub	sp, #32
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003684:	2306      	movs	r3, #6
 8003686:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003688:	2340      	movs	r3, #64	; 0x40
 800368a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003694:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003696:	f107 0308 	add.w	r3, r7, #8
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fe02 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	2106      	movs	r1, #6
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8d3 	bl	8003854 <SDMMC_GetCmdResp1>
 80036ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036b0:	69fb      	ldr	r3, [r7, #28]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b088      	sub	sp, #32
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80036c6:	2333      	movs	r3, #51	; 0x33
 80036c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036ca:	2340      	movs	r3, #64	; 0x40
 80036cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036d8:	f107 0308 	add.w	r3, r7, #8
 80036dc:	4619      	mov	r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fde1 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	2133      	movs	r1, #51	; 0x33
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8b2 	bl	8003854 <SDMMC_GetCmdResp1>
 80036f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036f2:	69fb      	ldr	r3, [r7, #28]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003708:	2302      	movs	r3, #2
 800370a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800370c:	23c0      	movs	r3, #192	; 0xc0
 800370e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003718:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800371a:	f107 0308 	add.w	r3, r7, #8
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fdc0 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f982 	bl	8003a30 <SDMMC_GetCmdResp2>
 800372c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800372e:	69fb      	ldr	r3, [r7, #28]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3720      	adds	r7, #32
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003746:	2309      	movs	r3, #9
 8003748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800374a:	23c0      	movs	r3, #192	; 0xc0
 800374c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003756:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003758:	f107 0308 	add.w	r3, r7, #8
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fda1 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f963 	bl	8003a30 <SDMMC_GetCmdResp2>
 800376a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800376c:	69fb      	ldr	r3, [r7, #28]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003784:	2303      	movs	r3, #3
 8003786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003788:	2340      	movs	r3, #64	; 0x40
 800378a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003794:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003796:	f107 0308 	add.w	r3, r7, #8
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fd82 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	2103      	movs	r1, #3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9c8 	bl	8003b3c <SDMMC_GetCmdResp6>
 80037ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037ae:	69fb      	ldr	r3, [r7, #28]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80037c6:	230d      	movs	r3, #13
 80037c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037ca:	2340      	movs	r3, #64	; 0x40
 80037cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fd61 	bl	80032a6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	210d      	movs	r1, #13
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f832 	bl	8003854 <SDMMC_GetCmdResp1>
 80037f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037f2:	69fb      	ldr	r3, [r7, #28]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <SDMMC_GetCmdError+0x50>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a11      	ldr	r2, [pc, #68]	; (8003850 <SDMMC_GetCmdError+0x54>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0a5b      	lsrs	r3, r3, #9
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	60fa      	str	r2, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003828:	e009      	b.n	800383e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f1      	beq.n	800381a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	22c5      	movs	r2, #197	; 0xc5
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000
 8003850:	10624dd3 	.word	0x10624dd3

08003854 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	460b      	mov	r3, r1
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003862:	4b70      	ldr	r3, [pc, #448]	; (8003a24 <SDMMC_GetCmdResp1+0x1d0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a70      	ldr	r2, [pc, #448]	; (8003a28 <SDMMC_GetCmdResp1+0x1d4>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	0a5a      	lsrs	r2, r3, #9
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	61fa      	str	r2, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003884:	e0c9      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ef      	beq.n	8003876 <SDMMC_GetCmdResp1+0x22>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ea      	bne.n	8003876 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2204      	movs	r2, #4
 80038b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80038b2:	2304      	movs	r3, #4
 80038b4:	e0b1      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a6      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	22c5      	movs	r2, #197	; 0xc5
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff fd11 	bl	80032fa <SDIO_GetCommandResponse>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	4293      	cmp	r3, r2
 80038e0:	d001      	beq.n	80038e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e099      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80038e6:	2100      	movs	r1, #0
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff fd13 	bl	8003314 <SDIO_GetResponse>
 80038ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4b4e      	ldr	r3, [pc, #312]	; (8003a2c <SDMMC_GetCmdResp1+0x1d8>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e08d      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	da02      	bge.n	800390a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003908:	e087      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003914:	2340      	movs	r3, #64	; 0x40
 8003916:	e080      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	e079      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003934:	e071      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003944:	e069      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003954:	e061      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003964:	e059      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003974:	e051      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003984:	e049      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003994:	e041      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80039a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a4:	e039      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80039b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b4:	e031      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80039c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039c4:	e029      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80039d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039d4:	e021      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80039e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039e4:	e019      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80039f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039f4:	e011      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003a00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a04:	e009      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003a10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003a14:	e001      	b.n	8003a1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000
 8003a28:	10624dd3 	.word	0x10624dd3
 8003a2c:	fdffe008 	.word	0xfdffe008

08003a30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a38:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <SDMMC_GetCmdResp2+0x88>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <SDMMC_GetCmdResp2+0x8c>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0a5b      	lsrs	r3, r3, #9
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a5c:	e026      	b.n	8003aac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ef      	beq.n	8003a4e <SDMMC_GetCmdResp2+0x1e>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ea      	bne.n	8003a4e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2204      	movs	r2, #4
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e00e      	b.n	8003aac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e003      	b.n	8003aac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	22c5      	movs	r2, #197	; 0xc5
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	10624dd3 	.word	0x10624dd3

08003ac0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <SDMMC_GetCmdResp3+0x74>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <SDMMC_GetCmdResp3+0x78>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0a5b      	lsrs	r3, r3, #9
 8003ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e5a      	subs	r2, r3, #1
 8003ae2:	60fa      	str	r2, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003aec:	e01b      	b.n	8003b26 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ef      	beq.n	8003ade <SDMMC_GetCmdResp3+0x1e>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ea      	bne.n	8003ade <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	e003      	b.n	8003b26 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	22c5      	movs	r2, #197	; 0xc5
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	460b      	mov	r3, r1
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b4a:	4b35      	ldr	r3, [pc, #212]	; (8003c20 <SDMMC_GetCmdResp6+0xe4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a35      	ldr	r2, [pc, #212]	; (8003c24 <SDMMC_GetCmdResp6+0xe8>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	0a5b      	lsrs	r3, r3, #9
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	1e5a      	subs	r2, r3, #1
 8003b64:	61fa      	str	r2, [r7, #28]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b6e:	e052      	b.n	8003c16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ef      	beq.n	8003b60 <SDMMC_GetCmdResp6+0x24>
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ea      	bne.n	8003b60 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e03a      	b.n	8003c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e02f      	b.n	8003c16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff fb9f 	bl	80032fa <SDIO_GetCommandResponse>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d001      	beq.n	8003bca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e025      	b.n	8003c16 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	22c5      	movs	r2, #197	; 0xc5
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7ff fb9e 	bl	8003314 <SDIO_GetResponse>
 8003bd8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d106      	bne.n	8003bf2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e011      	b.n	8003c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c00:	e009      	b.n	8003c16 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c10:	e001      	b.n	8003c16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000000 	.word	0x20000000
 8003c24:	10624dd3 	.word	0x10624dd3

08003c28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c30:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <SDMMC_GetCmdResp7+0x94>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <SDMMC_GetCmdResp7+0x98>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0a5b      	lsrs	r3, r3, #9
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	60fa      	str	r2, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c54:	e02c      	b.n	8003cb0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ef      	beq.n	8003c46 <SDMMC_GetCmdResp7+0x1e>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ea      	bne.n	8003c46 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c82:	2304      	movs	r3, #4
 8003c84:	e014      	b.n	8003cb0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e009      	b.n	8003cb0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2240      	movs	r2, #64	; 0x40
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003cae:	2300      	movs	r3, #0
  
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	10624dd3 	.word	0x10624dd3

08003cc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003cc8:	4904      	ldr	r1, [pc, #16]	; (8003cdc <MX_FATFS_Init+0x18>)
 8003cca:	4805      	ldr	r0, [pc, #20]	; (8003ce0 <MX_FATFS_Init+0x1c>)
 8003ccc:	f002 fac6 	bl	800625c <FATFS_LinkDriver>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <MX_FATFS_Init+0x20>)
 8003cd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20002164 	.word	0x20002164
 8003ce0:	0800636c 	.word	0x0800636c
 8003ce4:	20002160 	.word	0x20002160

08003ce8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003cec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003d02:	f000 f879 	bl	8003df8 <BSP_SD_IsDetected>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d001      	beq.n	8003d10 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e012      	b.n	8003d36 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003d10:	480b      	ldr	r0, [pc, #44]	; (8003d40 <BSP_SD_Init+0x48>)
 8003d12:	f7fe f8db 	bl	8001ecc <HAL_SD_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8003d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d24:	4806      	ldr	r0, [pc, #24]	; (8003d40 <BSP_SD_Init+0x48>)
 8003d26:	f7fe feb3 	bl	8002a90 <HAL_SD_ConfigWideBusOperation>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8003d34:	79fb      	ldrb	r3, [r7, #7]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000109c 	.word	0x2000109c

08003d44 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	4806      	ldr	r0, [pc, #24]	; (8003d7c <BSP_SD_ReadBlocks+0x38>)
 8003d62:	f7fe f961 	bl	8002028 <HAL_SD_ReadBlocks>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000109c 	.word	0x2000109c

08003d80 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	4806      	ldr	r0, [pc, #24]	; (8003db8 <BSP_SD_WriteBlocks+0x38>)
 8003d9e:	f7fe fb21 	bl	80023e4 <HAL_SD_WriteBlocks>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000109c 	.word	0x2000109c

08003dbc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003dc0:	4805      	ldr	r0, [pc, #20]	; (8003dd8 <BSP_SD_GetCardState+0x1c>)
 8003dc2:	f7fe feff 	bl	8002bc4 <HAL_SD_GetCardState>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000109c 	.word	0x2000109c

08003ddc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4803      	ldr	r0, [pc, #12]	; (8003df4 <BSP_SD_GetCardInfo+0x18>)
 8003de8:	f7fe fe26 	bl	8002a38 <HAL_SD_GetCardInfo>
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	2000109c 	.word	0x2000109c

08003df8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	b2db      	uxtb	r3, r3
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <SD_CheckStatus+0x38>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003e24:	f7ff ffca 	bl	8003dbc <BSP_SD_GetCardState>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d107      	bne.n	8003e3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <SD_CheckStatus+0x38>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <SD_CheckStatus+0x38>)
 8003e3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003e3e:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <SD_CheckStatus+0x38>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	b2db      	uxtb	r3, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000009 	.word	0x20000009

08003e50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <SD_initialize+0x38>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003e60:	f7ff ff4a 	bl	8003cf8 <BSP_SD_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ffd1 	bl	8003e14 <SD_CheckStatus>
 8003e72:	4603      	mov	r3, r0
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <SD_initialize+0x38>)
 8003e78:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003e7a:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <SD_initialize+0x38>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000009 	.word	0x20000009

08003e8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ffbb 	bl	8003e14 <SD_CheckStatus>
 8003e9e:	4603      	mov	r3, r0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68b8      	ldr	r0, [r7, #8]
 8003ec6:	f7ff ff3d 	bl	8003d44 <BSP_SD_ReadBlocks>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d107      	bne.n	8003ee0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003ed0:	bf00      	nop
 8003ed2:	f7ff ff73 	bl	8003dbc <BSP_SD_GetCardState>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1fa      	bne.n	8003ed2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b086      	sub	sp, #24
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	68b8      	ldr	r0, [r7, #8]
 8003f08:	f7ff ff3a 	bl	8003d80 <BSP_SD_WriteBlocks>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d107      	bne.n	8003f22 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003f12:	bf00      	nop
 8003f14:	f7ff ff52 	bl	8003dbc <BSP_SD_GetCardState>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1fa      	bne.n	8003f14 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	; 0x30
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	603a      	str	r2, [r7, #0]
 8003f36:	71fb      	strb	r3, [r7, #7]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <SD_ioctl+0xac>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <SD_ioctl+0x28>
 8003f50:	2303      	movs	r3, #3
 8003f52:	e03c      	b.n	8003fce <SD_ioctl+0xa2>

  switch (cmd)
 8003f54:	79bb      	ldrb	r3, [r7, #6]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d834      	bhi.n	8003fc4 <SD_ioctl+0x98>
 8003f5a:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <SD_ioctl+0x34>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f79 	.word	0x08003f79
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003fab 	.word	0x08003fab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003f76:	e028      	b.n	8003fca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003f78:	f107 030c 	add.w	r3, r7, #12
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff2d 	bl	8003ddc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003f8e:	e01c      	b.n	8003fca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff21 	bl	8003ddc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003fa8:	e00f      	b.n	8003fca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003faa:	f107 030c 	add.w	r3, r7, #12
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff ff14 	bl	8003ddc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	0a5a      	lsrs	r2, r3, #9
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003fc2:	e002      	b.n	8003fca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003fca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3730      	adds	r7, #48	; 0x30
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000009 	.word	0x20000009

08003fdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	4a08      	ldr	r2, [pc, #32]	; (800400c <disk_status+0x30>)
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	79fa      	ldrb	r2, [r7, #7]
 8003ff4:	4905      	ldr	r1, [pc, #20]	; (800400c <disk_status+0x30>)
 8003ff6:	440a      	add	r2, r1
 8003ff8:	7a12      	ldrb	r2, [r2, #8]
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4798      	blx	r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000050 	.word	0x20000050

08004010 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	4a0d      	ldr	r2, [pc, #52]	; (8004058 <disk_initialize+0x48>)
 8004022:	5cd3      	ldrb	r3, [r2, r3]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d111      	bne.n	800404c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	4a0b      	ldr	r2, [pc, #44]	; (8004058 <disk_initialize+0x48>)
 800402c:	2101      	movs	r1, #1
 800402e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <disk_initialize+0x48>)
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	79fa      	ldrb	r2, [r7, #7]
 800403e:	4906      	ldr	r1, [pc, #24]	; (8004058 <disk_initialize+0x48>)
 8004040:	440a      	add	r2, r1
 8004042:	7a12      	ldrb	r2, [r2, #8]
 8004044:	4610      	mov	r0, r2
 8004046:	4798      	blx	r3
 8004048:	4603      	mov	r3, r0
 800404a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000050 	.word	0x20000050

0800405c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <disk_read+0x3c>)
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	689c      	ldr	r4, [r3, #8]
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	4a07      	ldr	r2, [pc, #28]	; (8004098 <disk_read+0x3c>)
 800407c:	4413      	add	r3, r2
 800407e:	7a18      	ldrb	r0, [r3, #8]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	47a0      	blx	r4
 8004088:	4603      	mov	r3, r0
 800408a:	75fb      	strb	r3, [r7, #23]
  return res;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
}
 800408e:	4618      	mov	r0, r3
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	bd90      	pop	{r4, r7, pc}
 8004096:	bf00      	nop
 8004098:	20000050 	.word	0x20000050

0800409c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <disk_write+0x3c>)
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	68dc      	ldr	r4, [r3, #12]
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <disk_write+0x3c>)
 80040bc:	4413      	add	r3, r2
 80040be:	7a18      	ldrb	r0, [r3, #8]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	47a0      	blx	r4
 80040c8:	4603      	mov	r3, r0
 80040ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd90      	pop	{r4, r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000050 	.word	0x20000050

080040dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	603a      	str	r2, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
 80040e8:	460b      	mov	r3, r1
 80040ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <disk_ioctl+0x38>)
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	79fa      	ldrb	r2, [r7, #7]
 80040fa:	4906      	ldr	r1, [pc, #24]	; (8004114 <disk_ioctl+0x38>)
 80040fc:	440a      	add	r2, r1
 80040fe:	7a10      	ldrb	r0, [r2, #8]
 8004100:	79b9      	ldrb	r1, [r7, #6]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	4798      	blx	r3
 8004106:	4603      	mov	r3, r0
 8004108:	73fb      	strb	r3, [r7, #15]
  return res;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000050 	.word	0x20000050

08004118 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3301      	adds	r3, #1
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004128:	89fb      	ldrh	r3, [r7, #14]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	b21a      	sxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b21b      	sxth	r3, r3
 8004134:	4313      	orrs	r3, r2
 8004136:	b21b      	sxth	r3, r3
 8004138:	81fb      	strh	r3, [r7, #14]
	return rv;
 800413a:	89fb      	ldrh	r3, [r7, #14]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3303      	adds	r3, #3
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	3202      	adds	r2, #2
 8004160:	7812      	ldrb	r2, [r2, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	3201      	adds	r2, #1
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004180:	68fb      	ldr	r3, [r7, #12]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	887a      	ldrh	r2, [r7, #2]
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	1c53      	adds	r3, r2, #1
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	1c59      	adds	r1, r3, #1
 8004240:	6179      	str	r1, [r7, #20]
 8004242:	7812      	ldrb	r2, [r2, #0]
 8004244:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3b01      	subs	r3, #1
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f1      	bne.n	8004236 <mem_cpy+0x1a>
	}
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800425e:	b480      	push	{r7}
 8004260:	b087      	sub	sp, #28
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	617a      	str	r2, [r7, #20]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3b01      	subs	r3, #1
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f3      	bne.n	800426e <mem_set+0x10>
}
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	61fa      	str	r2, [r7, #28]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	4619      	mov	r1, r3
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	61ba      	str	r2, [r7, #24]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	1acb      	subs	r3, r1, r3
 80042c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <mem_cmp+0x40>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0eb      	beq.n	80042ac <mem_cmp+0x18>

	return r;
 80042d4:	697b      	ldr	r3, [r7, #20]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80042ec:	e002      	b.n	80042f4 <chk_chr+0x12>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3301      	adds	r3, #1
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <chk_chr+0x26>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	4293      	cmp	r3, r2
 8004306:	d1f2      	bne.n	80042ee <chk_chr+0xc>
	return *str;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	781b      	ldrb	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e029      	b.n	8004380 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800432c:	4a27      	ldr	r2, [pc, #156]	; (80043cc <chk_lock+0xb4>)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	4413      	add	r3, r2
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01d      	beq.n	8004376 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800433a:	4a24      	ldr	r2, [pc, #144]	; (80043cc <chk_lock+0xb4>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	4413      	add	r3, r2
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d116      	bne.n	800437a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <chk_lock+0xb4>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	4413      	add	r3, r2
 8004354:	3304      	adds	r3, #4
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800435c:	429a      	cmp	r2, r3
 800435e:	d10c      	bne.n	800437a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004360:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <chk_lock+0xb4>)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	4413      	add	r3, r2
 8004368:	3308      	adds	r3, #8
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004370:	429a      	cmp	r2, r3
 8004372:	d102      	bne.n	800437a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004374:	e007      	b.n	8004386 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d9d2      	bls.n	800432c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d109      	bne.n	80043a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <chk_lock+0x80>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d101      	bne.n	800439c <chk_lock+0x84>
 8004398:	2300      	movs	r3, #0
 800439a:	e010      	b.n	80043be <chk_lock+0xa6>
 800439c:	2312      	movs	r3, #18
 800439e:	e00e      	b.n	80043be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <chk_lock+0xa0>
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <chk_lock+0xb4>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4413      	add	r3, r2
 80043ae:	330c      	adds	r3, #12
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b6:	d101      	bne.n	80043bc <chk_lock+0xa4>
 80043b8:	2310      	movs	r3, #16
 80043ba:	e000      	b.n	80043be <chk_lock+0xa6>
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000030 	.word	0x20000030

080043d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043d6:	2300      	movs	r3, #0
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	e002      	b.n	80043e2 <enq_lock+0x12>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3301      	adds	r3, #1
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d806      	bhi.n	80043f6 <enq_lock+0x26>
 80043e8:	4a09      	ldr	r2, [pc, #36]	; (8004410 <enq_lock+0x40>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	4413      	add	r3, r2
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f2      	bne.n	80043dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20000030 	.word	0x20000030

08004414 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e01f      	b.n	8004464 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004424:	4a41      	ldr	r2, [pc, #260]	; (800452c <inc_lock+0x118>)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	4413      	add	r3, r2
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d113      	bne.n	800445e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004436:	4a3d      	ldr	r2, [pc, #244]	; (800452c <inc_lock+0x118>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	4413      	add	r3, r2
 800443e:	3304      	adds	r3, #4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004446:	429a      	cmp	r2, r3
 8004448:	d109      	bne.n	800445e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800444a:	4a38      	ldr	r2, [pc, #224]	; (800452c <inc_lock+0x118>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	4413      	add	r3, r2
 8004452:	3308      	adds	r3, #8
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800445a:	429a      	cmp	r2, r3
 800445c:	d006      	beq.n	800446c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d9dc      	bls.n	8004424 <inc_lock+0x10>
 800446a:	e000      	b.n	800446e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800446c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d132      	bne.n	80044da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e002      	b.n	8004480 <inc_lock+0x6c>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d806      	bhi.n	8004494 <inc_lock+0x80>
 8004486:	4a29      	ldr	r2, [pc, #164]	; (800452c <inc_lock+0x118>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	4413      	add	r3, r2
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f2      	bne.n	800447a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d101      	bne.n	800449e <inc_lock+0x8a>
 800449a:	2300      	movs	r3, #0
 800449c:	e040      	b.n	8004520 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4922      	ldr	r1, [pc, #136]	; (800452c <inc_lock+0x118>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	440b      	add	r3, r1
 80044aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	491e      	ldr	r1, [pc, #120]	; (800452c <inc_lock+0x118>)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	440b      	add	r3, r1
 80044b8:	3304      	adds	r3, #4
 80044ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	491a      	ldr	r1, [pc, #104]	; (800452c <inc_lock+0x118>)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	440b      	add	r3, r1
 80044c8:	3308      	adds	r3, #8
 80044ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80044cc:	4a17      	ldr	r2, [pc, #92]	; (800452c <inc_lock+0x118>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	4413      	add	r3, r2
 80044d4:	330c      	adds	r3, #12
 80044d6:	2200      	movs	r2, #0
 80044d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <inc_lock+0xe0>
 80044e0:	4a12      	ldr	r2, [pc, #72]	; (800452c <inc_lock+0x118>)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	4413      	add	r3, r2
 80044e8:	330c      	adds	r3, #12
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <inc_lock+0xe0>
 80044f0:	2300      	movs	r3, #0
 80044f2:	e015      	b.n	8004520 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <inc_lock+0xf8>
 80044fa:	4a0c      	ldr	r2, [pc, #48]	; (800452c <inc_lock+0x118>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	330c      	adds	r3, #12
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	e001      	b.n	8004510 <inc_lock+0xfc>
 800450c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004510:	4906      	ldr	r1, [pc, #24]	; (800452c <inc_lock+0x118>)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	440b      	add	r3, r1
 8004518:	330c      	adds	r3, #12
 800451a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3301      	adds	r3, #1
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20000030 	.word	0x20000030

08004530 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e010      	b.n	8004560 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800453e:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <clear_lock+0x44>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d105      	bne.n	800455a <clear_lock+0x2a>
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <clear_lock+0x44>)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	4413      	add	r3, r2
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d9eb      	bls.n	800453e <clear_lock+0xe>
	}
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000030 	.word	0x20000030

08004578 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	78db      	ldrb	r3, [r3, #3]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d034      	beq.n	80045f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	7858      	ldrb	r0, [r3, #1]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800459c:	2301      	movs	r3, #1
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	f7ff fd7c 	bl	800409c <disk_write>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
 80045ae:	e022      	b.n	80045f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	1ad2      	subs	r2, r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d217      	bcs.n	80045f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	789b      	ldrb	r3, [r3, #2]
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e010      	b.n	80045f0 <sync_window+0x78>
					wsect += fs->fsize;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4413      	add	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	7858      	ldrb	r0, [r3, #1]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80045e2:	2301      	movs	r3, #1
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	f7ff fd59 	bl	800409c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d8eb      	bhi.n	80045ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d01b      	beq.n	8004650 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ffad 	bl	8004578 <sync_window>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d113      	bne.n	8004650 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	7858      	ldrb	r0, [r3, #1]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004632:	2301      	movs	r3, #1
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	f7ff fd11 	bl	800405c <disk_read>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
 8004644:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	3b02      	subs	r3, #2
 8004668:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	3b02      	subs	r3, #2
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d301      	bcc.n	800467a <clust2sect+0x20>
 8004676:	2300      	movs	r3, #0
 8004678:	e008      	b.n	800468c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	895b      	ldrh	r3, [r3, #10]
 800467e:	461a      	mov	r2, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	fb03 f202 	mul.w	r2, r3, r2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	4413      	add	r3, r2
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d904      	bls.n	80046b8 <get_fat+0x20>
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d302      	bcc.n	80046be <get_fat+0x26>
		val = 1;	/* Internal error */
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e0bb      	b.n	8004836 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80046be:	f04f 33ff 	mov.w	r3, #4294967295
 80046c2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	f000 8083 	beq.w	80047d4 <get_fat+0x13c>
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	f300 80a7 	bgt.w	8004822 <get_fat+0x18a>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <get_fat+0x46>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d056      	beq.n	800478a <get_fat+0xf2>
 80046dc:	e0a1      	b.n	8004822 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	899b      	ldrh	r3, [r3, #12]
 80046f4:	4619      	mov	r1, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80046fc:	4413      	add	r3, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	6938      	ldr	r0, [r7, #16]
 8004702:	f7ff ff7d 	bl	8004600 <move_window>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 808d 	bne.w	8004828 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	60fa      	str	r2, [r7, #12]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	8992      	ldrh	r2, [r2, #12]
 8004718:	fbb3 f1f2 	udiv	r1, r3, r2
 800471c:	fb02 f201 	mul.w	r2, r2, r1
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800472a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	899b      	ldrh	r3, [r3, #12]
 8004734:	4619      	mov	r1, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	fbb3 f3f1 	udiv	r3, r3, r1
 800473c:	4413      	add	r3, r2
 800473e:	4619      	mov	r1, r3
 8004740:	6938      	ldr	r0, [r7, #16]
 8004742:	f7ff ff5d 	bl	8004600 <move_window>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d16f      	bne.n	800482c <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	899b      	ldrh	r3, [r3, #12]
 8004750:	461a      	mov	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	fbb3 f1f2 	udiv	r1, r3, r2
 8004758:	fb02 f201 	mul.w	r2, r2, r1
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4413      	add	r3, r2
 8004762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	461a      	mov	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4313      	orrs	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <get_fat+0xe8>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	e002      	b.n	8004786 <get_fat+0xee>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004786:	617b      	str	r3, [r7, #20]
			break;
 8004788:	e055      	b.n	8004836 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	899b      	ldrh	r3, [r3, #12]
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	b29b      	uxth	r3, r3
 8004796:	4619      	mov	r1, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	fbb3 f3f1 	udiv	r3, r3, r1
 800479e:	4413      	add	r3, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	6938      	ldr	r0, [r7, #16]
 80047a4:	f7ff ff2c 	bl	8004600 <move_window>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d140      	bne.n	8004830 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	8992      	ldrh	r2, [r2, #12]
 80047bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80047c0:	fb02 f200 	mul.w	r2, r2, r0
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	440b      	add	r3, r1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fca5 	bl	8004118 <ld_word>
 80047ce:	4603      	mov	r3, r0
 80047d0:	617b      	str	r3, [r7, #20]
			break;
 80047d2:	e030      	b.n	8004836 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	899b      	ldrh	r3, [r3, #12]
 80047dc:	089b      	lsrs	r3, r3, #2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	4619      	mov	r1, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80047e8:	4413      	add	r3, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	6938      	ldr	r0, [r7, #16]
 80047ee:	f7ff ff07 	bl	8004600 <move_window>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11d      	bne.n	8004834 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	8992      	ldrh	r2, [r2, #12]
 8004806:	fbb3 f0f2 	udiv	r0, r3, r2
 800480a:	fb02 f200 	mul.w	r2, r2, r0
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	440b      	add	r3, r1
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fc98 	bl	8004148 <ld_dword>
 8004818:	4603      	mov	r3, r0
 800481a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800481e:	617b      	str	r3, [r7, #20]
			break;
 8004820:	e009      	b.n	8004836 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004822:	2301      	movs	r3, #1
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e006      	b.n	8004836 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004828:	bf00      	nop
 800482a:	e004      	b.n	8004836 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800482c:	bf00      	nop
 800482e:	e002      	b.n	8004836 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004834:	bf00      	nop
		}
	}

	return val;
 8004836:	697b      	ldr	r3, [r7, #20]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800484c:	2302      	movs	r3, #2
 800484e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b01      	cmp	r3, #1
 8004854:	f240 8102 	bls.w	8004a5c <put_fat+0x21c>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	f080 80fc 	bcs.w	8004a5c <put_fat+0x21c>
		switch (fs->fs_type) {
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b03      	cmp	r3, #3
 800486a:	f000 80b6 	beq.w	80049da <put_fat+0x19a>
 800486e:	2b03      	cmp	r3, #3
 8004870:	f300 80fd 	bgt.w	8004a6e <put_fat+0x22e>
 8004874:	2b01      	cmp	r3, #1
 8004876:	d003      	beq.n	8004880 <put_fat+0x40>
 8004878:	2b02      	cmp	r3, #2
 800487a:	f000 8083 	beq.w	8004984 <put_fat+0x144>
 800487e:	e0f6      	b.n	8004a6e <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4413      	add	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	899b      	ldrh	r3, [r3, #12]
 8004896:	4619      	mov	r1, r3
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	fbb3 f3f1 	udiv	r3, r3, r1
 800489e:	4413      	add	r3, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff feac 	bl	8004600 <move_window>
 80048a8:	4603      	mov	r3, r0
 80048aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048ac:	7ffb      	ldrb	r3, [r7, #31]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 80d6 	bne.w	8004a60 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	61ba      	str	r2, [r7, #24]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	8992      	ldrh	r2, [r2, #12]
 80048c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80048c8:	fb02 f200 	mul.w	r2, r2, r0
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <put_fat+0xb8>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b25b      	sxtb	r3, r3
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	b25a      	sxtb	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	b25b      	sxtb	r3, r3
 80048f0:	4313      	orrs	r3, r2
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e001      	b.n	80048fc <put_fat+0xbc>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	899b      	ldrh	r3, [r3, #12]
 800490e:	4619      	mov	r1, r3
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	fbb3 f3f1 	udiv	r3, r3, r1
 8004916:	4413      	add	r3, r2
 8004918:	4619      	mov	r1, r3
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff fe70 	bl	8004600 <move_window>
 8004920:	4603      	mov	r3, r0
 8004922:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004924:	7ffb      	ldrb	r3, [r7, #31]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 809c 	bne.w	8004a64 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	899b      	ldrh	r3, [r3, #12]
 8004936:	461a      	mov	r2, r3
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fbb3 f0f2 	udiv	r0, r3, r2
 800493e:	fb02 f200 	mul.w	r2, r2, r0
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	440b      	add	r3, r1
 8004946:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <put_fat+0x11a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e00e      	b.n	8004978 <put_fat+0x138>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b25b      	sxtb	r3, r3
 8004960:	f023 030f 	bic.w	r3, r3, #15
 8004964:	b25a      	sxtb	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	b25b      	sxtb	r3, r3
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	b25b      	sxtb	r3, r3
 8004972:	4313      	orrs	r3, r2
 8004974:	b25b      	sxtb	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	70da      	strb	r2, [r3, #3]
			break;
 8004982:	e074      	b.n	8004a6e <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	899b      	ldrh	r3, [r3, #12]
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	b29b      	uxth	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	fbb3 f3f1 	udiv	r3, r3, r1
 8004998:	4413      	add	r3, r2
 800499a:	4619      	mov	r1, r3
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff fe2f 	bl	8004600 <move_window>
 80049a2:	4603      	mov	r3, r0
 80049a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049a6:	7ffb      	ldrb	r3, [r7, #31]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d15d      	bne.n	8004a68 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	8992      	ldrh	r2, [r2, #12]
 80049ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80049be:	fb02 f200 	mul.w	r2, r2, r0
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	440b      	add	r3, r1
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	b292      	uxth	r2, r2
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fbde 	bl	800418e <st_word>
			fs->wflag = 1;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	70da      	strb	r2, [r3, #3]
			break;
 80049d8:	e049      	b.n	8004a6e <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	899b      	ldrh	r3, [r3, #12]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	4619      	mov	r1, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ee:	4413      	add	r3, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff fe04 	bl	8004600 <move_window>
 80049f8:	4603      	mov	r3, r0
 80049fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049fc:	7ffb      	ldrb	r3, [r7, #31]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d134      	bne.n	8004a6c <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	8992      	ldrh	r2, [r2, #12]
 8004a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a1a:	fb02 f200 	mul.w	r2, r2, r0
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	440b      	add	r3, r1
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fb90 	bl	8004148 <ld_dword>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a2e:	4323      	orrs	r3, r4
 8004a30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	8992      	ldrh	r2, [r2, #12]
 8004a40:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a44:	fb02 f200 	mul.w	r2, r2, r0
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fbb8 	bl	80041c4 <st_dword>
			fs->wflag = 1;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	70da      	strb	r2, [r3, #3]
			break;
 8004a5a:	e008      	b.n	8004a6e <put_fat+0x22e>
		}
	}
 8004a5c:	bf00      	nop
 8004a5e:	e006      	b.n	8004a6e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004a60:	bf00      	nop
 8004a62:	e004      	b.n	8004a6e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004a64:	bf00      	nop
 8004a66:	e002      	b.n	8004a6e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004a6c:	bf00      	nop
	return res;
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3724      	adds	r7, #36	; 0x24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd90      	pop	{r4, r7, pc}

08004a78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d904      	bls.n	8004a9e <remove_chain+0x26>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d301      	bcc.n	8004aa2 <remove_chain+0x2a>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e04b      	b.n	8004b3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	69b8      	ldr	r0, [r7, #24]
 8004ab0:	f7ff fec6 	bl	8004840 <put_fat>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004ab8:	7ffb      	ldrb	r3, [r7, #31]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <remove_chain+0x4a>
 8004abe:	7ffb      	ldrb	r3, [r7, #31]
 8004ac0:	e03b      	b.n	8004b3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff fde7 	bl	8004698 <get_fat>
 8004aca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d031      	beq.n	8004b36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <remove_chain+0x64>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e02e      	b.n	8004b3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d101      	bne.n	8004ae8 <remove_chain+0x70>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e028      	b.n	8004b3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004ae8:	2200      	movs	r2, #0
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	69b8      	ldr	r0, [r7, #24]
 8004aee:	f7ff fea7 	bl	8004840 <put_fat>
 8004af2:	4603      	mov	r3, r0
 8004af4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004af6:	7ffb      	ldrb	r3, [r7, #31]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <remove_chain+0x88>
 8004afc:	7ffb      	ldrb	r3, [r7, #31]
 8004afe:	e01c      	b.n	8004b3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	3b02      	subs	r3, #2
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d20b      	bcs.n	8004b26 <remove_chain+0xae>
			fs->free_clst++;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	791b      	ldrb	r3, [r3, #4]
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3c6      	bcc.n	8004ac2 <remove_chain+0x4a>
 8004b34:	e000      	b.n	8004b38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004b36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b088      	sub	sp, #32
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10d      	bne.n	8004b74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <create_chain+0x2c>
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d31b      	bcc.n	8004ba6 <create_chain+0x64>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e018      	b.n	8004ba6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fd8e 	bl	8004698 <get_fat>
 8004b7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d801      	bhi.n	8004b88 <create_chain+0x46>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e070      	b.n	8004c6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d101      	bne.n	8004b94 <create_chain+0x52>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	e06a      	b.n	8004c6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d201      	bcs.n	8004ba2 <create_chain+0x60>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	e063      	b.n	8004c6a <create_chain+0x128>
		scl = clst;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3301      	adds	r3, #1
 8004bae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d307      	bcc.n	8004bca <create_chain+0x88>
				ncl = 2;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d901      	bls.n	8004bca <create_chain+0x88>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e04f      	b.n	8004c6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004bca:	69f9      	ldr	r1, [r7, #28]
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fd63 	bl	8004698 <get_fat>
 8004bd2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00e      	beq.n	8004bf8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d003      	beq.n	8004be8 <create_chain+0xa6>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d101      	bne.n	8004bec <create_chain+0xaa>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	e03e      	b.n	8004c6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d1da      	bne.n	8004baa <create_chain+0x68>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e038      	b.n	8004c6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004bf8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	6938      	ldr	r0, [r7, #16]
 8004c02:	f7ff fe1d 	bl	8004840 <put_fat>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <create_chain+0xe2>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d006      	beq.n	8004c24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	6938      	ldr	r0, [r7, #16]
 8004c1c:	f7ff fe10 	bl	8004840 <put_fat>
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d116      	bne.n	8004c58 <create_chain+0x116>
		fs->last_clst = ncl;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	3b02      	subs	r3, #2
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d804      	bhi.n	8004c48 <create_chain+0x106>
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	1e5a      	subs	r2, r3, #1
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	791b      	ldrb	r3, [r3, #4]
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	711a      	strb	r2, [r3, #4]
 8004c56:	e007      	b.n	8004c68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d102      	bne.n	8004c64 <create_chain+0x122>
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c62:	e000      	b.n	8004c66 <create_chain+0x124>
 8004c64:	2301      	movs	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c68:	69fb      	ldr	r3, [r7, #28]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b087      	sub	sp, #28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	3304      	adds	r3, #4
 8004c88:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	899b      	ldrh	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	8952      	ldrh	r2, [r2, #10]
 8004c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	613a      	str	r2, [r7, #16]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <clmt_clust+0x42>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e010      	b.n	8004cd6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d307      	bcc.n	8004ccc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cca:	e7e9      	b.n	8004ca0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004ccc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	4413      	add	r3, r2
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b086      	sub	sp, #24
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cf8:	d204      	bcs.n	8004d04 <dir_sdi+0x22>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004d04:	2302      	movs	r3, #2
 8004d06:	e071      	b.n	8004dec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <dir_sdi+0x46>
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d902      	bls.n	8004d28 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	8912      	ldrh	r2, [r2, #8]
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d301      	bcc.n	8004d3e <dir_sdi+0x5c>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e056      	b.n	8004dec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	61da      	str	r2, [r3, #28]
 8004d46:	e02d      	b.n	8004da4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	895b      	ldrh	r3, [r3, #10]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	899b      	ldrh	r3, [r3, #12]
 8004d52:	fb03 f302 	mul.w	r3, r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d58:	e019      	b.n	8004d8e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6979      	ldr	r1, [r7, #20]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fc9a 	bl	8004698 <get_fat>
 8004d64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d101      	bne.n	8004d72 <dir_sdi+0x90>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e03c      	b.n	8004dec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d904      	bls.n	8004d82 <dir_sdi+0xa0>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d301      	bcc.n	8004d86 <dir_sdi+0xa4>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e032      	b.n	8004dec <dir_sdi+0x10a>
			ofs -= csz;
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d2e1      	bcs.n	8004d5a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d96:	6979      	ldr	r1, [r7, #20]
 8004d98:	6938      	ldr	r0, [r7, #16]
 8004d9a:	f7ff fc5e 	bl	800465a <clust2sect>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <dir_sdi+0xd4>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e01a      	b.n	8004dec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	899b      	ldrh	r3, [r3, #12]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dc6:	441a      	add	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	899b      	ldrh	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	fbb3 f0f2 	udiv	r0, r3, r2
 8004dde:	fb02 f200 	mul.w	r2, r2, r0
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	18ca      	adds	r2, r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	3320      	adds	r3, #32
 8004e0a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <dir_next+0x28>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e1a:	d301      	bcc.n	8004e20 <dir_next+0x2c>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	e0bb      	b.n	8004f98 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	899b      	ldrh	r3, [r3, #12]
 8004e24:	461a      	mov	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e2c:	fb02 f201 	mul.w	r2, r2, r1
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f040 809d 	bne.w	8004f72 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	8912      	ldrh	r2, [r2, #8]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	f0c0 808d 	bcc.w	8004f72 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	61da      	str	r2, [r3, #28]
 8004e5e:	2304      	movs	r3, #4
 8004e60:	e09a      	b.n	8004f98 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	899b      	ldrh	r3, [r3, #12]
 8004e66:	461a      	mov	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	8952      	ldrh	r2, [r2, #10]
 8004e72:	3a01      	subs	r2, #1
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d17b      	bne.n	8004f72 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7ff fc08 	bl	8004698 <get_fat>
 8004e88:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d801      	bhi.n	8004e94 <dir_next+0xa0>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e081      	b.n	8004f98 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d101      	bne.n	8004ea0 <dir_next+0xac>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e07b      	b.n	8004f98 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d359      	bcc.n	8004f5e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	61da      	str	r2, [r3, #28]
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e06e      	b.n	8004f98 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7ff fe3d 	bl	8004b42 <create_chain>
 8004ec8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <dir_next+0xe0>
 8004ed0:	2307      	movs	r3, #7
 8004ed2:	e061      	b.n	8004f98 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <dir_next+0xea>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e05c      	b.n	8004f98 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d101      	bne.n	8004eea <dir_next+0xf6>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e056      	b.n	8004f98 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff fb44 	bl	8004578 <sync_window>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <dir_next+0x106>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e04e      	b.n	8004f98 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	899b      	ldrh	r3, [r3, #12]
 8004f04:	461a      	mov	r2, r3
 8004f06:	2100      	movs	r1, #0
 8004f08:	f7ff f9a9 	bl	800425e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff fba1 	bl	800465a <clust2sect>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f1e:	e012      	b.n	8004f46 <dir_next+0x152>
						fs->wflag = 1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fb26 	bl	8004578 <sync_window>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <dir_next+0x142>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e030      	b.n	8004f98 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	895b      	ldrh	r3, [r3, #10]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d3e6      	bcc.n	8004f20 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad2      	subs	r2, r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff fb77 	bl	800465a <clust2sect>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	899b      	ldrh	r3, [r3, #12]
 8004f82:	461a      	mov	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f8a:	fb02 f200 	mul.w	r2, r2, r0
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	18ca      	adds	r2, r1, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fe95 	bl	8004ce2 <dir_sdi>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d12b      	bne.n	800501a <dir_alloc+0x7a>
		n = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff fb17 	bl	8004600 <move_window>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11d      	bne.n	8005018 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2be5      	cmp	r3, #229	; 0xe5
 8004fe4:	d004      	beq.n	8004ff0 <dir_alloc+0x50>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d107      	bne.n	8005000 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d102      	bne.n	8005004 <dir_alloc+0x64>
 8004ffe:	e00c      	b.n	800501a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005004:	2101      	movs	r1, #1
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fef4 	bl	8004df4 <dir_next>
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0d7      	beq.n	8004fc6 <dir_alloc+0x26>
 8005016:	e000      	b.n	800501a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005018:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	2b04      	cmp	r3, #4
 800501e:	d101      	bne.n	8005024 <dir_alloc+0x84>
 8005020:	2307      	movs	r3, #7
 8005022:	75fb      	strb	r3, [r7, #23]
	return res;
 8005024:	7dfb      	ldrb	r3, [r7, #23]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	331a      	adds	r3, #26
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff f86b 	bl	8004118 <ld_word>
 8005042:	4603      	mov	r3, r0
 8005044:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d109      	bne.n	8005062 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f860 	bl	8004118 <ld_word>
 8005058:	4603      	mov	r3, r0
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	331a      	adds	r3, #26
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	b292      	uxth	r2, r2
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff f883 	bl	800418e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d109      	bne.n	80050a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f103 0214 	add.w	r2, r3, #20
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	b29b      	uxth	r3, r3
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f7ff f875 	bl	800418e <st_word>
	}
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80050ba:	2100      	movs	r1, #0
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff fe10 	bl	8004ce2 <dir_sdi>
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <dir_find+0x24>
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	e03e      	b.n	800514e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	4619      	mov	r1, r3
 80050d6:	6938      	ldr	r0, [r7, #16]
 80050d8:	f7ff fa92 	bl	8004600 <move_window>
 80050dc:	4603      	mov	r3, r0
 80050de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d12f      	bne.n	8005146 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <dir_find+0x4e>
 80050f4:	2304      	movs	r3, #4
 80050f6:	75fb      	strb	r3, [r7, #23]
 80050f8:	e028      	b.n	800514c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	330b      	adds	r3, #11
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005106:	b2da      	uxtb	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	330b      	adds	r3, #11
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <dir_find+0x86>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a18      	ldr	r0, [r3, #32]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3324      	adds	r3, #36	; 0x24
 8005124:	220b      	movs	r2, #11
 8005126:	4619      	mov	r1, r3
 8005128:	f7ff f8b4 	bl	8004294 <mem_cmp>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005132:	2100      	movs	r1, #0
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff fe5d 	bl	8004df4 <dir_next>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0c5      	beq.n	80050d0 <dir_find+0x24>
 8005144:	e002      	b.n	800514c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800514a:	bf00      	nop

	return res;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005164:	2101      	movs	r1, #1
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff ff1a 	bl	8004fa0 <dir_alloc>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11c      	bne.n	80051b0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	4619      	mov	r1, r3
 800517c:	68b8      	ldr	r0, [r7, #8]
 800517e:	f7ff fa3f 	bl	8004600 <move_window>
 8005182:	4603      	mov	r3, r0
 8005184:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d111      	bne.n	80051b0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	2220      	movs	r2, #32
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff f862 	bl	800425e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a18      	ldr	r0, [r3, #32]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3324      	adds	r3, #36	; 0x24
 80051a2:	220b      	movs	r2, #11
 80051a4:	4619      	mov	r1, r3
 80051a6:	f7ff f839 	bl	800421c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2201      	movs	r2, #1
 80051ae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80051d2:	220b      	movs	r2, #11
 80051d4:	2120      	movs	r1, #32
 80051d6:	68b8      	ldr	r0, [r7, #8]
 80051d8:	f7ff f841 	bl	800425e <mem_set>
	si = i = 0; ni = 8;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	2308      	movs	r3, #8
 80051e6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	61fa      	str	r2, [r7, #28]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80051f6:	7efb      	ldrb	r3, [r7, #27]
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d94e      	bls.n	800529a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80051fc:	7efb      	ldrb	r3, [r7, #27]
 80051fe:	2b2f      	cmp	r3, #47	; 0x2f
 8005200:	d006      	beq.n	8005210 <create_name+0x54>
 8005202:	7efb      	ldrb	r3, [r7, #27]
 8005204:	2b5c      	cmp	r3, #92	; 0x5c
 8005206:	d110      	bne.n	800522a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005208:	e002      	b.n	8005210 <create_name+0x54>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3301      	adds	r3, #1
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b2f      	cmp	r3, #47	; 0x2f
 800521a:	d0f6      	beq.n	800520a <create_name+0x4e>
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b5c      	cmp	r3, #92	; 0x5c
 8005226:	d0f0      	beq.n	800520a <create_name+0x4e>
			break;
 8005228:	e038      	b.n	800529c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800522a:	7efb      	ldrb	r3, [r7, #27]
 800522c:	2b2e      	cmp	r3, #46	; 0x2e
 800522e:	d003      	beq.n	8005238 <create_name+0x7c>
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	d30c      	bcc.n	8005252 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b0b      	cmp	r3, #11
 800523c:	d002      	beq.n	8005244 <create_name+0x88>
 800523e:	7efb      	ldrb	r3, [r7, #27]
 8005240:	2b2e      	cmp	r3, #46	; 0x2e
 8005242:	d001      	beq.n	8005248 <create_name+0x8c>
 8005244:	2306      	movs	r3, #6
 8005246:	e044      	b.n	80052d2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005248:	2308      	movs	r3, #8
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	230b      	movs	r3, #11
 800524e:	617b      	str	r3, [r7, #20]
			continue;
 8005250:	e022      	b.n	8005298 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005252:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005256:	2b00      	cmp	r3, #0
 8005258:	da04      	bge.n	8005264 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800525a:	7efb      	ldrb	r3, [r7, #27]
 800525c:	3b80      	subs	r3, #128	; 0x80
 800525e:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <create_name+0x120>)
 8005260:	5cd3      	ldrb	r3, [r2, r3]
 8005262:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005264:	7efb      	ldrb	r3, [r7, #27]
 8005266:	4619      	mov	r1, r3
 8005268:	481d      	ldr	r0, [pc, #116]	; (80052e0 <create_name+0x124>)
 800526a:	f7ff f83a 	bl	80042e2 <chk_chr>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <create_name+0xbc>
 8005274:	2306      	movs	r3, #6
 8005276:	e02c      	b.n	80052d2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005278:	7efb      	ldrb	r3, [r7, #27]
 800527a:	2b60      	cmp	r3, #96	; 0x60
 800527c:	d905      	bls.n	800528a <create_name+0xce>
 800527e:	7efb      	ldrb	r3, [r7, #27]
 8005280:	2b7a      	cmp	r3, #122	; 0x7a
 8005282:	d802      	bhi.n	800528a <create_name+0xce>
 8005284:	7efb      	ldrb	r3, [r7, #27]
 8005286:	3b20      	subs	r3, #32
 8005288:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	613a      	str	r2, [r7, #16]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	4413      	add	r3, r2
 8005294:	7efa      	ldrb	r2, [r7, #27]
 8005296:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005298:	e7a6      	b.n	80051e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800529a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	441a      	add	r2, r3
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <create_name+0xf4>
 80052ac:	2306      	movs	r3, #6
 80052ae:	e010      	b.n	80052d2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2be5      	cmp	r3, #229	; 0xe5
 80052b6:	d102      	bne.n	80052be <create_name+0x102>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2205      	movs	r2, #5
 80052bc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80052be:	7efb      	ldrb	r3, [r7, #27]
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d801      	bhi.n	80052c8 <create_name+0x10c>
 80052c4:	2204      	movs	r2, #4
 80052c6:	e000      	b.n	80052ca <create_name+0x10e>
 80052c8:	2200      	movs	r2, #0
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	330b      	adds	r3, #11
 80052ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80052d0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	08006380 	.word	0x08006380
 80052e0:	08006300 	.word	0x08006300

080052e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80052f8:	e002      	b.n	8005300 <follow_path+0x1c>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b2f      	cmp	r3, #47	; 0x2f
 8005306:	d0f8      	beq.n	80052fa <follow_path+0x16>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b5c      	cmp	r3, #92	; 0x5c
 800530e:	d0f4      	beq.n	80052fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b1f      	cmp	r3, #31
 800531c:	d80a      	bhi.n	8005334 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2280      	movs	r2, #128	; 0x80
 8005322:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005326:	2100      	movs	r1, #0
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff fcda 	bl	8004ce2 <dir_sdi>
 800532e:	4603      	mov	r3, r0
 8005330:	75fb      	strb	r3, [r7, #23]
 8005332:	e048      	b.n	80053c6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005334:	463b      	mov	r3, r7
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff ff3f 	bl	80051bc <create_name>
 800533e:	4603      	mov	r3, r0
 8005340:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d139      	bne.n	80053bc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff feaf 	bl	80050ac <dir_find>
 800534e:	4603      	mov	r3, r0
 8005350:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005358:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b04      	cmp	r3, #4
 8005364:	d12c      	bne.n	80053c0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d127      	bne.n	80053c0 <follow_path+0xdc>
 8005370:	2305      	movs	r3, #5
 8005372:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005374:	e024      	b.n	80053c0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d121      	bne.n	80053c4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	799b      	ldrb	r3, [r3, #6]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800538c:	2305      	movs	r3, #5
 800538e:	75fb      	strb	r3, [r7, #23]
 8005390:	e019      	b.n	80053c6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	8992      	ldrh	r2, [r2, #12]
 80053a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80053a4:	fb02 f200 	mul.w	r2, r2, r0
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	440b      	add	r3, r1
 80053ac:	4619      	mov	r1, r3
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff fe3d 	bl	800502e <ld_clust>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053ba:	e7bb      	b.n	8005334 <follow_path+0x50>
			if (res != FR_OK) break;
 80053bc:	bf00      	nop
 80053be:	e002      	b.n	80053c6 <follow_path+0xe2>
				break;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80053c4:	bf00      	nop
			}
		}
	}

	return res;
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
 80053dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d031      	beq.n	800544a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e002      	b.n	80053f4 <get_ldnumber+0x24>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	3301      	adds	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d903      	bls.n	8005404 <get_ldnumber+0x34>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b3a      	cmp	r3, #58	; 0x3a
 8005402:	d1f4      	bne.n	80053ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b3a      	cmp	r3, #58	; 0x3a
 800540a:	d11c      	bne.n	8005446 <get_ldnumber+0x76>
			tp = *path;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	60fa      	str	r2, [r7, #12]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	3b30      	subs	r3, #48	; 0x30
 800541c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b09      	cmp	r3, #9
 8005422:	d80e      	bhi.n	8005442 <get_ldnumber+0x72>
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	429a      	cmp	r2, r3
 800542a:	d10a      	bne.n	8005442 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d107      	bne.n	8005442 <get_ldnumber+0x72>
					vol = (int)i;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	e002      	b.n	800544c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800544a:	693b      	ldr	r3, [r7, #16]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	70da      	strb	r2, [r3, #3]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f04f 32ff 	mov.w	r2, #4294967295
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff f8c4 	bl	8004600 <move_window>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <check_fs+0x2a>
 800547e:	2304      	movs	r3, #4
 8005480:	e038      	b.n	80054f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3334      	adds	r3, #52	; 0x34
 8005486:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe fe44 	bl	8004118 <ld_word>
 8005490:	4603      	mov	r3, r0
 8005492:	461a      	mov	r2, r3
 8005494:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <check_fs+0x48>
 800549c:	2303      	movs	r3, #3
 800549e:	e029      	b.n	80054f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054a6:	2be9      	cmp	r3, #233	; 0xe9
 80054a8:	d009      	beq.n	80054be <check_fs+0x66>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054b0:	2beb      	cmp	r3, #235	; 0xeb
 80054b2:	d11e      	bne.n	80054f2 <check_fs+0x9a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80054ba:	2b90      	cmp	r3, #144	; 0x90
 80054bc:	d119      	bne.n	80054f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3334      	adds	r3, #52	; 0x34
 80054c2:	3336      	adds	r3, #54	; 0x36
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe fe3f 	bl	8004148 <ld_dword>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054d0:	4a0a      	ldr	r2, [pc, #40]	; (80054fc <check_fs+0xa4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d101      	bne.n	80054da <check_fs+0x82>
 80054d6:	2300      	movs	r3, #0
 80054d8:	e00c      	b.n	80054f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3334      	adds	r3, #52	; 0x34
 80054de:	3352      	adds	r3, #82	; 0x52
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fe fe31 	bl	8004148 <ld_dword>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4a05      	ldr	r2, [pc, #20]	; (8005500 <check_fs+0xa8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <check_fs+0x9a>
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80054f2:	2302      	movs	r3, #2
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	00544146 	.word	0x00544146
 8005500:	33544146 	.word	0x33544146

08005504 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b096      	sub	sp, #88	; 0x58
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff ff59 	bl	80053d0 <get_ldnumber>
 800551e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005522:	2b00      	cmp	r3, #0
 8005524:	da01      	bge.n	800552a <find_volume+0x26>
 8005526:	230b      	movs	r3, #11
 8005528:	e265      	b.n	80059f6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800552a:	4ab0      	ldr	r2, [pc, #704]	; (80057ec <find_volume+0x2e8>)
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005532:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <find_volume+0x3a>
 800553a:	230c      	movs	r3, #12
 800553c:	e25b      	b.n	80059f6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005542:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	f023 0301 	bic.w	r3, r3, #1
 800554a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01a      	beq.n	800558a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe fd3f 	bl	8003fdc <disk_status>
 800555e:	4603      	mov	r3, r0
 8005560:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10c      	bne.n	800558a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d007      	beq.n	8005586 <find_volume+0x82>
 8005576:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005582:	230a      	movs	r3, #10
 8005584:	e237      	b.n	80059f6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005586:	2300      	movs	r3, #0
 8005588:	e235      	b.n	80059f6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005592:	b2da      	uxtb	r2, r3
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe fd37 	bl	8004010 <disk_initialize>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80055a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80055b4:	2303      	movs	r3, #3
 80055b6:	e21e      	b.n	80059f6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <find_volume+0xca>
 80055be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80055ca:	230a      	movs	r3, #10
 80055cc:	e213      	b.n	80059f6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	7858      	ldrb	r0, [r3, #1]
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	330c      	adds	r3, #12
 80055d6:	461a      	mov	r2, r3
 80055d8:	2102      	movs	r1, #2
 80055da:	f7fe fd7f 	bl	80040dc <disk_ioctl>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <find_volume+0xe4>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e206      	b.n	80059f6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	899b      	ldrh	r3, [r3, #12]
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f0:	d80d      	bhi.n	800560e <find_volume+0x10a>
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	899b      	ldrh	r3, [r3, #12]
 80055f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fa:	d308      	bcc.n	800560e <find_volume+0x10a>
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	899b      	ldrh	r3, [r3, #12]
 8005600:	461a      	mov	r2, r3
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	899b      	ldrh	r3, [r3, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <find_volume+0x10e>
 800560e:	2301      	movs	r3, #1
 8005610:	e1f1      	b.n	80059f6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800561a:	f7ff ff1d 	bl	8005458 <check_fs>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005624:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005628:	2b02      	cmp	r3, #2
 800562a:	d14b      	bne.n	80056c4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800562c:	2300      	movs	r3, #0
 800562e:	643b      	str	r3, [r7, #64]	; 0x40
 8005630:	e01f      	b.n	8005672 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005640:	4413      	add	r3, r2
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	3304      	adds	r3, #4
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d006      	beq.n	800565c <find_volume+0x158>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	3308      	adds	r3, #8
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fd78 	bl	8004148 <ld_dword>
 8005658:	4602      	mov	r2, r0
 800565a:	e000      	b.n	800565e <find_volume+0x15a>
 800565c:	2200      	movs	r2, #0
 800565e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005666:	440b      	add	r3, r1
 8005668:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800566c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566e:	3301      	adds	r3, #1
 8005670:	643b      	str	r3, [r7, #64]	; 0x40
 8005672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005674:	2b03      	cmp	r3, #3
 8005676:	d9dc      	bls.n	8005632 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005678:	2300      	movs	r3, #0
 800567a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <find_volume+0x184>
 8005682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005684:	3b01      	subs	r3, #1
 8005686:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005690:	4413      	add	r3, r2
 8005692:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005696:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <find_volume+0x1a6>
 800569e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056a2:	f7ff fed9 	bl	8005458 <check_fs>
 80056a6:	4603      	mov	r3, r0
 80056a8:	e000      	b.n	80056ac <find_volume+0x1a8>
 80056aa:	2303      	movs	r3, #3
 80056ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80056b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d905      	bls.n	80056c4 <find_volume+0x1c0>
 80056b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ba:	3301      	adds	r3, #1
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
 80056be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d9e1      	bls.n	8005688 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80056c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d101      	bne.n	80056d0 <find_volume+0x1cc>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e192      	b.n	80059f6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80056d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d901      	bls.n	80056dc <find_volume+0x1d8>
 80056d8:	230d      	movs	r3, #13
 80056da:	e18c      	b.n	80059f6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	3334      	adds	r3, #52	; 0x34
 80056e0:	330b      	adds	r3, #11
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe fd18 	bl	8004118 <ld_word>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	899b      	ldrh	r3, [r3, #12]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <find_volume+0x1f4>
 80056f4:	230d      	movs	r3, #13
 80056f6:	e17e      	b.n	80059f6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	3334      	adds	r3, #52	; 0x34
 80056fc:	3316      	adds	r3, #22
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fd0a 	bl	8004118 <ld_word>
 8005704:	4603      	mov	r3, r0
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <find_volume+0x218>
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	3334      	adds	r3, #52	; 0x34
 8005712:	3324      	adds	r3, #36	; 0x24
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fd17 	bl	8004148 <ld_dword>
 800571a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005720:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	789b      	ldrb	r3, [r3, #2]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d005      	beq.n	8005740 <find_volume+0x23c>
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	789b      	ldrb	r3, [r3, #2]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d001      	beq.n	8005740 <find_volume+0x23c>
 800573c:	230d      	movs	r3, #13
 800573e:	e15a      	b.n	80059f6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	789b      	ldrb	r3, [r3, #2]
 8005744:	461a      	mov	r2, r3
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005754:	b29a      	uxth	r2, r3
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	895b      	ldrh	r3, [r3, #10]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <find_volume+0x270>
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	895b      	ldrh	r3, [r3, #10]
 8005766:	461a      	mov	r2, r3
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	895b      	ldrh	r3, [r3, #10]
 800576c:	3b01      	subs	r3, #1
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <find_volume+0x274>
 8005774:	230d      	movs	r3, #13
 8005776:	e13e      	b.n	80059f6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	3334      	adds	r3, #52	; 0x34
 800577c:	3311      	adds	r3, #17
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe fcca 	bl	8004118 <ld_word>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	891b      	ldrh	r3, [r3, #8]
 8005790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005792:	8992      	ldrh	r2, [r2, #12]
 8005794:	0952      	lsrs	r2, r2, #5
 8005796:	b292      	uxth	r2, r2
 8005798:	fbb3 f1f2 	udiv	r1, r3, r2
 800579c:	fb02 f201 	mul.w	r2, r2, r1
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <find_volume+0x2a8>
 80057a8:	230d      	movs	r3, #13
 80057aa:	e124      	b.n	80059f6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	3334      	adds	r3, #52	; 0x34
 80057b0:	3313      	adds	r3, #19
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fcb0 	bl	8004118 <ld_word>
 80057b8:	4603      	mov	r3, r0
 80057ba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80057bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <find_volume+0x2cc>
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	3334      	adds	r3, #52	; 0x34
 80057c6:	3320      	adds	r3, #32
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe fcbd 	bl	8004148 <ld_dword>
 80057ce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	3334      	adds	r3, #52	; 0x34
 80057d4:	330e      	adds	r3, #14
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fc9e 	bl	8004118 <ld_word>
 80057dc:	4603      	mov	r3, r0
 80057de:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80057e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <find_volume+0x2ec>
 80057e6:	230d      	movs	r3, #13
 80057e8:	e105      	b.n	80059f6 <find_volume+0x4f2>
 80057ea:	bf00      	nop
 80057ec:	20000028 	.word	0x20000028

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80057f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80057f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f4:	4413      	add	r3, r2
 80057f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f8:	8911      	ldrh	r1, [r2, #8]
 80057fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057fc:	8992      	ldrh	r2, [r2, #12]
 80057fe:	0952      	lsrs	r2, r2, #5
 8005800:	b292      	uxth	r2, r2
 8005802:	fbb1 f2f2 	udiv	r2, r1, r2
 8005806:	b292      	uxth	r2, r2
 8005808:	4413      	add	r3, r2
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800580c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	429a      	cmp	r2, r3
 8005812:	d201      	bcs.n	8005818 <find_volume+0x314>
 8005814:	230d      	movs	r3, #13
 8005816:	e0ee      	b.n	80059f6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005820:	8952      	ldrh	r2, [r2, #10]
 8005822:	fbb3 f3f2 	udiv	r3, r3, r2
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <find_volume+0x32e>
 800582e:	230d      	movs	r3, #13
 8005830:	e0e1      	b.n	80059f6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005832:	2303      	movs	r3, #3
 8005834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800583e:	4293      	cmp	r3, r2
 8005840:	d802      	bhi.n	8005848 <find_volume+0x344>
 8005842:	2302      	movs	r3, #2
 8005844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800584e:	4293      	cmp	r3, r2
 8005850:	d802      	bhi.n	8005858 <find_volume+0x354>
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005864:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005866:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586a:	441a      	add	r2, r3
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005870:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	441a      	add	r2, r3
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800587a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800587e:	2b03      	cmp	r3, #3
 8005880:	d11e      	bne.n	80058c0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	3334      	adds	r3, #52	; 0x34
 8005886:	332a      	adds	r3, #42	; 0x2a
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe fc45 	bl	8004118 <ld_word>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <find_volume+0x394>
 8005894:	230d      	movs	r3, #13
 8005896:	e0ae      	b.n	80059f6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589a:	891b      	ldrh	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <find_volume+0x3a0>
 80058a0:	230d      	movs	r3, #13
 80058a2:	e0a8      	b.n	80059f6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	3334      	adds	r3, #52	; 0x34
 80058a8:	332c      	adds	r3, #44	; 0x2c
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fc4c 	bl	8004148 <ld_dword>
 80058b0:	4602      	mov	r2, r0
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	647b      	str	r3, [r7, #68]	; 0x44
 80058be:	e01f      	b.n	8005900 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	891b      	ldrh	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <find_volume+0x3c8>
 80058c8:	230d      	movs	r3, #13
 80058ca:	e094      	b.n	80059f6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d2:	441a      	add	r2, r3
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80058d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d103      	bne.n	80058e8 <find_volume+0x3e4>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	e00a      	b.n	80058fe <find_volume+0x3fa>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	4613      	mov	r3, r2
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	4413      	add	r3, r2
 80058f2:	085a      	lsrs	r2, r3, #1
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80058fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	899b      	ldrh	r3, [r3, #12]
 8005908:	4619      	mov	r1, r3
 800590a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800590c:	440b      	add	r3, r1
 800590e:	3b01      	subs	r3, #1
 8005910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005912:	8989      	ldrh	r1, [r1, #12]
 8005914:	fbb3 f3f1 	udiv	r3, r3, r1
 8005918:	429a      	cmp	r2, r3
 800591a:	d201      	bcs.n	8005920 <find_volume+0x41c>
 800591c:	230d      	movs	r3, #13
 800591e:	e06a      	b.n	80059f6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	615a      	str	r2, [r3, #20]
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005936:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800593a:	2b03      	cmp	r3, #3
 800593c:	d149      	bne.n	80059d2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	3334      	adds	r3, #52	; 0x34
 8005942:	3330      	adds	r3, #48	; 0x30
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fbe7 	bl	8004118 <ld_word>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d140      	bne.n	80059d2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005952:	3301      	adds	r3, #1
 8005954:	4619      	mov	r1, r3
 8005956:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005958:	f7fe fe52 	bl	8004600 <move_window>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d137      	bne.n	80059d2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	2200      	movs	r2, #0
 8005966:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	3334      	adds	r3, #52	; 0x34
 800596c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005970:	4618      	mov	r0, r3
 8005972:	f7fe fbd1 	bl	8004118 <ld_word>
 8005976:	4603      	mov	r3, r0
 8005978:	461a      	mov	r2, r3
 800597a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800597e:	429a      	cmp	r2, r3
 8005980:	d127      	bne.n	80059d2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	3334      	adds	r3, #52	; 0x34
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe fbde 	bl	8004148 <ld_dword>
 800598c:	4603      	mov	r3, r0
 800598e:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <find_volume+0x4fc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d11e      	bne.n	80059d2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	3334      	adds	r3, #52	; 0x34
 8005998:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe fbd3 	bl	8004148 <ld_dword>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4a17      	ldr	r2, [pc, #92]	; (8005a04 <find_volume+0x500>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d113      	bne.n	80059d2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	3334      	adds	r3, #52	; 0x34
 80059ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fbc8 	bl	8004148 <ld_dword>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	3334      	adds	r3, #52	; 0x34
 80059c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fbbe 	bl	8004148 <ld_dword>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80059d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <find_volume+0x504>)
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <find_volume+0x504>)
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <find_volume+0x504>)
 80059e8:	881a      	ldrh	r2, [r3, #0]
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80059ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059f0:	f7fe fd9e 	bl	8004530 <clear_lock>
#endif
	return FR_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3758      	adds	r7, #88	; 0x58
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	41615252 	.word	0x41615252
 8005a04:	61417272 	.word	0x61417272
 8005a08:	2000002c 	.word	0x2000002c

08005a0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005a16:	2309      	movs	r3, #9
 8005a18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01c      	beq.n	8005a5a <validate+0x4e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d018      	beq.n	8005a5a <validate+0x4e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d013      	beq.n	8005a5a <validate+0x4e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	889a      	ldrh	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	88db      	ldrh	r3, [r3, #6]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d10c      	bne.n	8005a5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fac8 	bl	8003fdc <disk_status>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <validate+0x4e>
			res = FR_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <validate+0x5a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	e000      	b.n	8005a68 <validate+0x5c>
 8005a66:	2300      	movs	r3, #0
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	6013      	str	r3, [r2, #0]
	return res;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005a8a:	f107 0310 	add.w	r3, r7, #16
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fc9e 	bl	80053d0 <get_ldnumber>
 8005a94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da01      	bge.n	8005aa0 <f_mount+0x28>
 8005a9c:	230b      	movs	r3, #11
 8005a9e:	e02b      	b.n	8005af8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005aa0:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <f_mount+0x88>)
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005ab0:	69b8      	ldr	r0, [r7, #24]
 8005ab2:	f7fe fd3d 	bl	8004530 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	490d      	ldr	r1, [pc, #52]	; (8005b00 <f_mount+0x88>)
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <f_mount+0x66>
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d001      	beq.n	8005ae2 <f_mount+0x6a>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e00a      	b.n	8005af8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ae2:	f107 010c 	add.w	r1, r7, #12
 8005ae6:	f107 0308 	add.w	r3, r7, #8
 8005aea:	2200      	movs	r2, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fd09 	bl	8005504 <find_volume>
 8005af2:	4603      	mov	r3, r0
 8005af4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3720      	adds	r7, #32
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000028 	.word	0x20000028

08005b04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b098      	sub	sp, #96	; 0x60
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <f_open+0x18>
 8005b18:	2309      	movs	r3, #9
 8005b1a:	e1bb      	b.n	8005e94 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005b24:	79fa      	ldrb	r2, [r7, #7]
 8005b26:	f107 0110 	add.w	r1, r7, #16
 8005b2a:	f107 0308 	add.w	r3, r7, #8
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fce8 	bl	8005504 <find_volume>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 819f 	bne.w	8005e82 <f_open+0x37e>
		dj.obj.fs = fs;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	f107 0314 	add.w	r3, r7, #20
 8005b4e:	4611      	mov	r1, r2
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff fbc7 	bl	80052e4 <follow_path>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11a      	bne.n	8005b9a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005b64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005b68:	b25b      	sxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	da03      	bge.n	8005b76 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005b6e:	2306      	movs	r3, #6
 8005b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b74:	e011      	b.n	8005b9a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fbc2 	bl	8004318 <chk_lock>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f003 031c 	and.w	r3, r3, #28
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d07f      	beq.n	8005ca4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005bac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d10e      	bne.n	8005bd2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005bb4:	f7fe fc0c 	bl	80043d0 <enq_lock>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <f_open+0xc8>
 8005bbe:	f107 0314 	add.w	r3, r7, #20
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fac7 	bl	8005156 <dir_register>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	e000      	b.n	8005bce <f_open+0xca>
 8005bcc:	2312      	movs	r3, #18
 8005bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	f043 0308 	orr.w	r3, r3, #8
 8005bd8:	71fb      	strb	r3, [r7, #7]
 8005bda:	e010      	b.n	8005bfe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005bdc:	7ebb      	ldrb	r3, [r7, #26]
 8005bde:	f003 0311 	and.w	r3, r3, #17
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <f_open+0xea>
					res = FR_DENIED;
 8005be6:	2307      	movs	r3, #7
 8005be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005bec:	e007      	b.n	8005bfe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <f_open+0xfa>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d168      	bne.n	8005cd8 <f_open+0x1d4>
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d063      	beq.n	8005cd8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005c10:	f7fe f86a 	bl	8003ce8 <get_fattime>
 8005c14:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	330e      	adds	r3, #14
 8005c1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fad1 	bl	80041c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	3316      	adds	r3, #22
 8005c26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fe facb 	bl	80041c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c30:	330b      	adds	r3, #11
 8005c32:	2220      	movs	r2, #32
 8005c34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff f9f6 	bl	800502e <ld_clust>
 8005c42:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fa0e 	bl	800506c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	331c      	adds	r3, #28
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fab4 	bl	80041c4 <st_dword>
					fs->wflag = 1;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d037      	beq.n	8005cd8 <f_open+0x1d4>
						dw = fs->winsect;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	2200      	movs	r2, #0
 8005c74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fefe 	bl	8004a78 <remove_chain>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d126      	bne.n	8005cd8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fcb6 	bl	8004600 <move_window>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	611a      	str	r2, [r3, #16]
 8005ca2:	e019      	b.n	8005cd8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d115      	bne.n	8005cd8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005cac:	7ebb      	ldrb	r3, [r7, #26]
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <f_open+0x1ba>
					res = FR_NO_FILE;
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005cbc:	e00c      	b.n	8005cd8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <f_open+0x1d4>
 8005cc8:	7ebb      	ldrb	r3, [r7, #26]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <f_open+0x1d4>
						res = FR_DENIED;
 8005cd2:	2307      	movs	r3, #7
 8005cd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d128      	bne.n	8005d32 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bf14      	ite	ne
 8005d0a:	2301      	movne	r3, #1
 8005d0c:	2300      	moveq	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	f107 0314 	add.w	r3, r7, #20
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fe fb7b 	bl	8004414 <inc_lock>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <f_open+0x22e>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005d32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 80a3 	bne.w	8005e82 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d40:	4611      	mov	r1, r2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff f973 	bl	800502e <ld_clust>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d50:	331c      	adds	r3, #28
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe f9f8 	bl	8004148 <ld_dword>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	88da      	ldrh	r2, [r3, #6]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	79fa      	ldrb	r2, [r7, #7]
 8005d76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3330      	adds	r3, #48	; 0x30
 8005d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fa62 	bl	800425e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d06e      	beq.n	8005e82 <f_open+0x37e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d06a      	beq.n	8005e82 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	895b      	ldrh	r3, [r3, #10]
 8005db8:	461a      	mov	r2, r3
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	899b      	ldrh	r3, [r3, #12]
 8005dbe:	fb03 f302 	mul.w	r3, r3, r2
 8005dc2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd0:	e016      	b.n	8005e00 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe fc5e 	bl	8004698 <get_fat>
 8005ddc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d802      	bhi.n	8005dea <f_open+0x2e6>
 8005de4:	2302      	movs	r3, #2
 8005de6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d102      	bne.n	8005df8 <f_open+0x2f4>
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8005e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <f_open+0x30c>
 8005e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d8e0      	bhi.n	8005dd2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d131      	bne.n	8005e82 <f_open+0x37e>
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	899b      	ldrh	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e26:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e2a:	fb02 f201 	mul.w	r2, r2, r1
 8005e2e:	1a9b      	subs	r3, r3, r2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d026      	beq.n	8005e82 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fc0e 	bl	800465a <clust2sect>
 8005e3e:	6478      	str	r0, [r7, #68]	; 0x44
 8005e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <f_open+0x34a>
						res = FR_INT_ERR;
 8005e46:	2302      	movs	r3, #2
 8005e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e4c:	e019      	b.n	8005e82 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	899b      	ldrh	r3, [r3, #12]
 8005e52:	461a      	mov	r2, r3
 8005e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e56:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5c:	441a      	add	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	7858      	ldrb	r0, [r3, #1]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	2301      	movs	r3, #1
 8005e72:	f7fe f8f3 	bl	800405c <disk_read>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <f_open+0x37e>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005e82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <f_open+0x38c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3760      	adds	r7, #96	; 0x60
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08c      	sub	sp, #48	; 0x30
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f107 0210 	add.w	r2, r7, #16
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff fda5 	bl	8005a0c <validate>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d107      	bne.n	8005ee0 <f_write+0x44>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	7d5b      	ldrb	r3, [r3, #21]
 8005ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <f_write+0x4a>
 8005ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ee4:	e16a      	b.n	80061bc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	7d1b      	ldrb	r3, [r3, #20]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <f_write+0x5a>
 8005ef2:	2307      	movs	r3, #7
 8005ef4:	e162      	b.n	80061bc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	f080 814c 	bcs.w	80061a0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005f10:	e146      	b.n	80061a0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	8992      	ldrh	r2, [r2, #12]
 8005f1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f1e:	fb02 f201 	mul.w	r2, r2, r1
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f040 80f1 	bne.w	800610c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	8992      	ldrh	r2, [r2, #12]
 8005f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	8952      	ldrh	r2, [r2, #10]
 8005f3a:	3a01      	subs	r2, #1
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d143      	bne.n	8005fce <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10c      	bne.n	8005f68 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d11a      	bne.n	8005f90 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fdef 	bl	8004b42 <create_chain>
 8005f64:	62b8      	str	r0, [r7, #40]	; 0x28
 8005f66:	e013      	b.n	8005f90 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	4619      	mov	r1, r3
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7fe fe7b 	bl	8004c72 <clmt_clust>
 8005f7c:	62b8      	str	r0, [r7, #40]	; 0x28
 8005f7e:	e007      	b.n	8005f90 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f7fe fdda 	bl	8004b42 <create_chain>
 8005f8e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8109 	beq.w	80061aa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d104      	bne.n	8005fa8 <f_write+0x10c>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	755a      	strb	r2, [r3, #21]
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e109      	b.n	80061bc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d104      	bne.n	8005fba <f_write+0x11e>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	755a      	strb	r2, [r3, #21]
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e100      	b.n	80061bc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <f_write+0x132>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fcc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	7d1b      	ldrb	r3, [r3, #20]
 8005fd2:	b25b      	sxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	da18      	bge.n	800600a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	7858      	ldrb	r0, [r3, #1]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1a      	ldr	r2, [r3, #32]
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f7fe f858 	bl	800409c <disk_write>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <f_write+0x160>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	755a      	strb	r2, [r3, #21]
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0df      	b.n	80061bc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	7d1b      	ldrb	r3, [r3, #20]
 8006000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006004:	b2da      	uxtb	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f7fe fb21 	bl	800465a <clust2sect>
 8006018:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <f_write+0x18e>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2202      	movs	r2, #2
 8006024:	755a      	strb	r2, [r3, #21]
 8006026:	2302      	movs	r3, #2
 8006028:	e0c8      	b.n	80061bc <f_write+0x320>
			sect += csect;
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	4413      	add	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	899b      	ldrh	r3, [r3, #12]
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	fbb3 f3f2 	udiv	r3, r3, r2
 800603e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d043      	beq.n	80060ce <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	4413      	add	r3, r2
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	8952      	ldrh	r2, [r2, #10]
 8006050:	4293      	cmp	r3, r2
 8006052:	d905      	bls.n	8006060 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	895b      	ldrh	r3, [r3, #10]
 8006058:	461a      	mov	r2, r3
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	7858      	ldrb	r0, [r3, #1]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	69f9      	ldr	r1, [r7, #28]
 800606a:	f7fe f817 	bl	800409c <disk_write>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d004      	beq.n	800607e <f_write+0x1e2>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	755a      	strb	r2, [r3, #21]
 800607a:	2301      	movs	r3, #1
 800607c:	e09e      	b.n	80061bc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1a      	ldr	r2, [r3, #32]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	6a3a      	ldr	r2, [r7, #32]
 8006088:	429a      	cmp	r2, r3
 800608a:	d918      	bls.n	80060be <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a1a      	ldr	r2, [r3, #32]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	8992      	ldrh	r2, [r2, #12]
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	18d1      	adds	r1, r2, r3
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	899b      	ldrh	r3, [r3, #12]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f7fe f8b6 	bl	800421c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	7d1b      	ldrb	r3, [r3, #20]
 80060b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	899b      	ldrh	r3, [r3, #12]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80060cc:	e04b      	b.n	8006166 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d016      	beq.n	8006106 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d210      	bcs.n	8006106 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	7858      	ldrb	r0, [r3, #1]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060ee:	2301      	movs	r3, #1
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	f7fd ffb3 	bl	800405c <disk_read>
 80060f6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d004      	beq.n	8006106 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	755a      	strb	r2, [r3, #21]
 8006102:	2301      	movs	r3, #1
 8006104:	e05a      	b.n	80061bc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	899b      	ldrh	r3, [r3, #12]
 8006110:	4618      	mov	r0, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	8992      	ldrh	r2, [r2, #12]
 800611a:	fbb3 f1f2 	udiv	r1, r3, r2
 800611e:	fb02 f201 	mul.w	r2, r2, r1
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	1ac3      	subs	r3, r0, r3
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d901      	bls.n	8006134 <f_write+0x298>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	8992      	ldrh	r2, [r2, #12]
 8006142:	fbb3 f0f2 	udiv	r0, r3, r2
 8006146:	fb02 f200 	mul.w	r2, r2, r0
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	440b      	add	r3, r1
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	69f9      	ldr	r1, [r7, #28]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe f862 	bl	800421c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	7d1b      	ldrb	r3, [r3, #20]
 800615c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006160:	b2da      	uxtb	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	4413      	add	r3, r2
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	441a      	add	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	619a      	str	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	429a      	cmp	r2, r3
 8006184:	bf38      	it	cc
 8006186:	461a      	movcc	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	441a      	add	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f47f aeb5 	bne.w	8005f12 <f_write+0x76>
 80061a8:	e000      	b.n	80061ac <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80061aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	7d1b      	ldrb	r3, [r3, #20]
 80061b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3730      	adds	r7, #48	; 0x30
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80061da:	4b1f      	ldr	r3, [pc, #124]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 80061dc:	7a5b      	ldrb	r3, [r3, #9]
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d131      	bne.n	8006248 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80061e4:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 80061e6:	7a5b      	ldrb	r3, [r3, #9]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 80061ee:	2100      	movs	r1, #0
 80061f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80061f2:	4b19      	ldr	r3, [pc, #100]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 80061f4:	7a5b      	ldrb	r3, [r3, #9]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	4a17      	ldr	r2, [pc, #92]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 8006204:	7a5b      	ldrb	r3, [r3, #9]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	4b13      	ldr	r3, [pc, #76]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 800620c:	4413      	add	r3, r2
 800620e:	79fa      	ldrb	r2, [r7, #7]
 8006210:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 8006214:	7a5b      	ldrb	r3, [r3, #9]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	b2d1      	uxtb	r1, r2
 800621c:	4a0e      	ldr	r2, [pc, #56]	; (8006258 <FATFS_LinkDriverEx+0x94>)
 800621e:	7251      	strb	r1, [r2, #9]
 8006220:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006222:	7dbb      	ldrb	r3, [r7, #22]
 8006224:	3330      	adds	r3, #48	; 0x30
 8006226:	b2da      	uxtb	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	3301      	adds	r3, #1
 8006230:	223a      	movs	r2, #58	; 0x3a
 8006232:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	3302      	adds	r3, #2
 8006238:	222f      	movs	r2, #47	; 0x2f
 800623a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	3303      	adds	r3, #3
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
}
 800624a:	4618      	mov	r0, r3
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000050 	.word	0x20000050

0800625c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006266:	2200      	movs	r2, #0
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ffaa 	bl	80061c4 <FATFS_LinkDriverEx>
 8006270:	4603      	mov	r3, r0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <__libc_init_array>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	4d0d      	ldr	r5, [pc, #52]	; (80062b4 <__libc_init_array+0x38>)
 8006280:	4c0d      	ldr	r4, [pc, #52]	; (80062b8 <__libc_init_array+0x3c>)
 8006282:	1b64      	subs	r4, r4, r5
 8006284:	10a4      	asrs	r4, r4, #2
 8006286:	2600      	movs	r6, #0
 8006288:	42a6      	cmp	r6, r4
 800628a:	d109      	bne.n	80062a0 <__libc_init_array+0x24>
 800628c:	4d0b      	ldr	r5, [pc, #44]	; (80062bc <__libc_init_array+0x40>)
 800628e:	4c0c      	ldr	r4, [pc, #48]	; (80062c0 <__libc_init_array+0x44>)
 8006290:	f000 f820 	bl	80062d4 <_init>
 8006294:	1b64      	subs	r4, r4, r5
 8006296:	10a4      	asrs	r4, r4, #2
 8006298:	2600      	movs	r6, #0
 800629a:	42a6      	cmp	r6, r4
 800629c:	d105      	bne.n	80062aa <__libc_init_array+0x2e>
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a4:	4798      	blx	r3
 80062a6:	3601      	adds	r6, #1
 80062a8:	e7ee      	b.n	8006288 <__libc_init_array+0xc>
 80062aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ae:	4798      	blx	r3
 80062b0:	3601      	adds	r6, #1
 80062b2:	e7f2      	b.n	800629a <__libc_init_array+0x1e>
 80062b4:	08006408 	.word	0x08006408
 80062b8:	08006408 	.word	0x08006408
 80062bc:	08006408 	.word	0x08006408
 80062c0:	0800640c 	.word	0x0800640c

080062c4 <memset>:
 80062c4:	4402      	add	r2, r0
 80062c6:	4603      	mov	r3, r0
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d100      	bne.n	80062ce <memset+0xa>
 80062cc:	4770      	bx	lr
 80062ce:	f803 1b01 	strb.w	r1, [r3], #1
 80062d2:	e7f9      	b.n	80062c8 <memset+0x4>

080062d4 <_init>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr

080062e0 <_fini>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr
